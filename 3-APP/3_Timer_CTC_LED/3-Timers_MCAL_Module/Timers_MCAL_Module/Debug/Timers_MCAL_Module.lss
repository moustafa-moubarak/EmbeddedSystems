
Timers_MCAL_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7d  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000821  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ca  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f1  00000000  00000000  00003131  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_9>
  28:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_10>
  2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  74:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
		case (DIO_PORTC):
		*recall_value = PINC;
		break;
		
		case (DIO_PORTD):
		*recall_value = PIND;
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin>:
	}
}

void DIO_TogglePin(uint8 port, uint8 pin)
{
	switch(port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin+0x52>
 16c:	08 95       	ret
	{
		case DIO_PORTA:
			Toggle_BIT(PORTA,pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
			break;
 182:	08 95       	ret
			
		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <Set_GlobalInterrupt>:
#include "EXT_INT.h"

void Set_GlobalInterrupt(void)
{
	#if		GLOBAL_INTERRUPT		==		GLOBAL_INTERRUPT_ENABLE	
		SET_BIT(SREG, 7);
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8f bf       	out	0x3f, r24	; 63
 1cc:	08 95       	ret

000001ce <LED0_Init>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
}

void LED0_OFF(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1d8:	08 95       	ret

000001da <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1e2:	08 95       	ret

000001e4 <main>:
extern uint32	NUM_OVF_1	;
extern uint32	INIT_VALUE_1 ;

int main(void)
{
	LED0_Init();
 1e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED0_Init>
	Timer_Init(Timer0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 07 01 	call	0x20e	; 0x20e <Timer_Init>
	Set_CallBack(Timer0, LED0_Toggle);
 1ee:	6d ee       	ldi	r22, 0xED	; 237
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 43 01 	call	0x286	; 0x286 <Set_CallBack>
	Timer_SetDelay(Timer0, 15); 
 1f8:	4f e0       	ldi	r20, 0x0F	; 15
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Timer_SetDelay>
	Timer_Start(Timer0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 30 01 	call	0x260	; 0x260 <Timer_Start>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x28>

0000020e <Timer_Init>:
{
	switch(Timer)
	{
		case Timer0:
		#if			Timer0_PWM_WaveType			==		Non_Inverted
		OCR0 = ((Duty_Cycle-OVF_Ticks_T0)/100)-1;
 20e:	88 23       	and	r24, r24
 210:	19 f0       	breq	.+6      	; 0x218 <Timer_Init+0xa>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	99 f0       	breq	.+38     	; 0x23c <Timer_Init+0x2e>
 216:	08 95       	ret
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	83 bf       	out	0x33, r24	; 51
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	80 64       	ori	r24, 0x40	; 64
 222:	83 bf       	out	0x33, r24	; 51
 224:	88 b3       	in	r24, 0x18	; 24
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	8f 7e       	andi	r24, 0xEF	; 239
 232:	83 bf       	out	0x33, r24	; 51
 234:	83 b7       	in	r24, 0x33	; 51
 236:	80 62       	ori	r24, 0x20	; 32
 238:	83 bf       	out	0x33, r24	; 51
 23a:	08 95       	ret
 23c:	8f b5       	in	r24, 0x2f	; 47
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	8f bd       	out	0x2f, r24	; 47
 242:	8f b5       	in	r24, 0x2f	; 47
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	8f bd       	out	0x2f, r24	; 47
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	8e bd       	out	0x2e, r24	; 46
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	8e bd       	out	0x2e, r24	; 46
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Set_GlobalInterrupt>
 258:	89 b7       	in	r24, 0x39	; 57
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	89 bf       	out	0x39, r24	; 57
 25e:	08 95       	ret

00000260 <Timer_Start>:
 260:	88 23       	and	r24, r24
 262:	19 f0       	breq	.+6      	; 0x26a <Timer_Start+0xa>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	41 f0       	breq	.+16     	; 0x278 <Timer_Start+0x18>
 268:	08 95       	ret
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	83 bf       	out	0x33, r24	; 51
 270:	83 b7       	in	r24, 0x33	; 51
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	83 bf       	out	0x33, r24	; 51
 276:	08 95       	ret
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	8e bd       	out	0x2e, r24	; 46
 27e:	8e b5       	in	r24, 0x2e	; 46
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	8e bd       	out	0x2e, r24	; 46
 284:	08 95       	ret

00000286 <Set_CallBack>:
 286:	88 23       	and	r24, r24
 288:	19 f0       	breq	.+6      	; 0x290 <Set_CallBack+0xa>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	29 f0       	breq	.+10     	; 0x298 <Set_CallBack+0x12>
 28e:	08 95       	ret
 290:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <PTR_0+0x1>
 294:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <PTR_0>
 298:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <PTR_1+0x1>
 29c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <PTR_1>
 2a0:	08 95       	ret

000002a2 <Timer_SetDelay>:
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	d9 f4       	brne	.+54     	; 0x2dc <Timer_SetDelay+0x3a>
 2a6:	40 3a       	cpi	r20, 0xA0	; 160
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	58 07       	cpc	r21, r24
 2ac:	61 05       	cpc	r22, r1
 2ae:	71 05       	cpc	r23, r1
 2b0:	a8 f4       	brcc	.+42     	; 0x2dc <Timer_SetDelay+0x3a>
 2b2:	a8 ee       	ldi	r26, 0xE8	; 232
 2b4:	b3 e0       	ldi	r27, 0x03	; 3
 2b6:	9a 01       	movw	r18, r20
 2b8:	ab 01       	movw	r20, r22
 2ba:	0e 94 6d 02 	call	0x4da	; 0x4da <__muluhisi3>
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	68 94       	set
 2c4:	15 f8       	bld	r1, 5
 2c6:	b6 95       	lsr	r27
 2c8:	a7 95       	ror	r26
 2ca:	97 95       	ror	r25
 2cc:	87 95       	ror	r24
 2ce:	16 94       	lsr	r1
 2d0:	d1 f7       	brne	.-12     	; 0x2c6 <Timer_SetDelay+0x24>
 2d2:	bc 01       	movw	r22, r24
 2d4:	61 50       	subi	r22, 0x01	; 1
 2d6:	71 09       	sbc	r23, r1
 2d8:	7b bd       	out	0x2b, r23	; 43
 2da:	6a bd       	out	0x2a, r22	; 42
 2dc:	08 95       	ret

000002de <__vector_11>:
		#endif
	}
}

ISR(TIMER0_OVF_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 300:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1714>
 304:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1714+0x1>
 308:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1714+0x2>
 30c:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1714+0x3>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1714>
 31a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1714+0x1>
 31e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1714+0x2>
 322:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1714+0x3>
	
	if(cnt == NUM_OVF_0)
 326:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 32a:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 32e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 332:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 336:	84 17       	cp	r24, r20
 338:	95 07       	cpc	r25, r21
 33a:	a6 07       	cpc	r26, r22
 33c:	b7 07       	cpc	r27, r23
 33e:	71 f4       	brne	.+28     	; 0x35c <__vector_11+0x7e>
	{
		cnt = 0;
 340:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1714>
 344:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1714+0x1>
 348:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1714+0x2>
 34c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1714+0x3>
		(*PTR_0)();
 350:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 354:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 358:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 35a:	82 b7       	in	r24, 0x32	; 50
	}
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	(*PTR_0)();
 3a0:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 3a4:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 3a8:	09 95       	icall
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 3ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3f6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3fa:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	a1 1d       	adc	r26, r1
 402:	b1 1d       	adc	r27, r1
 404:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 408:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 40c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 410:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 414:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 418:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 41c:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 420:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 424:	84 17       	cp	r24, r20
 426:	95 07       	cpc	r25, r21
 428:	a6 07       	cpc	r26, r22
 42a:	b7 07       	cpc	r27, r23
 42c:	79 f4       	brne	.+30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		cnt = 0;
 42e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 432:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 436:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 43a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 43e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 442:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 446:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 448:	8c b5       	in	r24, 0x2c	; 44
 44a:	9d b5       	in	r25, 0x2d	; 45
	}
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	(*PTR_1)();
 490:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 494:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 498:	09 95       	icall
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__umulhisi3>:
 4bc:	a2 9f       	mul	r26, r18
 4be:	b0 01       	movw	r22, r0
 4c0:	b3 9f       	mul	r27, r19
 4c2:	c0 01       	movw	r24, r0
 4c4:	a3 9f       	mul	r26, r19
 4c6:	70 0d       	add	r23, r0
 4c8:	81 1d       	adc	r24, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	91 1d       	adc	r25, r1
 4ce:	b2 9f       	mul	r27, r18
 4d0:	70 0d       	add	r23, r0
 4d2:	81 1d       	adc	r24, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	91 1d       	adc	r25, r1
 4d8:	08 95       	ret

000004da <__muluhisi3>:
 4da:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__umulhisi3>
 4de:	a5 9f       	mul	r26, r21
 4e0:	90 0d       	add	r25, r0
 4e2:	b4 9f       	mul	r27, r20
 4e4:	90 0d       	add	r25, r0
 4e6:	a4 9f       	mul	r26, r20
 4e8:	80 0d       	add	r24, r0
 4ea:	91 1d       	adc	r25, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	08 95       	ret

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
