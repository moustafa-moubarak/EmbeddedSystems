
5_UART_LCD_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105d  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000820  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e8  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  64:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPINDir>:
		case (DIO_PORTC):
		PORTC=value;
		break;
		
		case (DIO_PORTD):
		PORTD=value;
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPINDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPINDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPINDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPINDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPINDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPINDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPINDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPINDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPINDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPINDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPINDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPINDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPINDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPINDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPINDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPINDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPINDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPINDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPINDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPINDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPINDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPINDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPINDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPINDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPINDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPINDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPINDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPinValue>:
	}
}

void DIO_SetPinValue(uint8 port, uint8 pin, uint8 value)
{
	switch(value)
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinValue+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinValue+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinValue+0xe0>
	{
		case (DIO_PIN_HIGH):
		switch(port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinValue+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinValue+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinValue+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinValue+0x5c>
 166:	08 95       	ret
		{
			case DIO_PORTA:
				SET_BIT(PORTA,pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinValue+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinValue+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
				break;
 17c:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB,pin);
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinValue+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinValue+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
			break;
 192:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC,pin);
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinValue+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinValue+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
			break;
 1a8:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD,pin);
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinValue+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinValue+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
			break;
 1be:	08 95       	ret
			break;
		}
		break;
		
		case (DIO_PIN_LOW):
		switch(port)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinValue+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinValue+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinValue+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinValue+0xca>
 1ce:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA,pin);
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinValue+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinValue+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
			break;
 1e6:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(PORTB,pin);
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
			break;
 1fe:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(PORTC,pin);
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
			break;
 216:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(PORTD,pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <LCD_Write_Command>:

}

void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	9c 2f       	mov	r25, r28
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	89 2b       	or	r24, r25
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Write_Command+0x3c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Write_Command+0x42>
 272:	00 00       	nop
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 27e:	2b b3       	in	r18, 0x1b	; 27
 280:	30 e1       	ldi	r19, 0x10	; 16
 282:	c3 9f       	mul	r28, r19
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	92 2f       	mov	r25, r18
 28a:	90 7f       	andi	r25, 0xF0	; 240
 28c:	89 2b       	or	r24, r25
 28e:	8b bb       	out	0x1b, r24	; 27
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Write_Command+0x6e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_Write_Command+0x74>
 2a4:	00 00       	nop
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Write_Command+0x84>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_Write_Command+0x8a>
 2ba:	00 00       	nop
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <LCD_Init>:
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	65 e0       	ldi	r22, 0x05	; 5
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPINDir>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	81 ee       	ldi	r24, 0xE1	; 225
 30a:	94 e0       	ldi	r25, 0x04	; 4
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <LCD_Init+0x4c>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Init+0x56>
 316:	00 00       	nop
 318:	83 e3       	ldi	r24, 0x33	; 51
 31a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 342:	08 95       	ret

00000344 <LCD_Write_Char>:
}

void LCD_Write_Char (uint8 data)
{
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
	#if		LCD_MODE	==			4
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, LCD_DATA_REG);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, LCD_WRITE);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, LCD_E_LOW);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>

		LCD_4BIT_MODE_D_PORT = (data & 0x0F) | (LCD_4BIT_MODE_D_PORT & 0xF0);
 366:	8b b3       	in	r24, 0x1b	; 27
 368:	9c 2f       	mov	r25, r28
 36a:	9f 70       	andi	r25, 0x0F	; 15
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	89 2b       	or	r24, r25
 370:	8b bb       	out	0x1b, r24	; 27
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, LCD_E_HIGH);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_Write_Char+0x3c>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_Write_Char+0x42>
 386:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, LCD_E_LOW);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>

		LCD_4BIT_MODE_D_PORT = (data << 4) | (LCD_4BIT_MODE_D_PORT & 0xF0);
 392:	2b b3       	in	r18, 0x1b	; 27
 394:	30 e1       	ldi	r19, 0x10	; 16
 396:	c3 9f       	mul	r28, r19
 398:	c0 01       	movw	r24, r0
 39a:	11 24       	eor	r1, r1
 39c:	92 2f       	mov	r25, r18
 39e:	90 7f       	andi	r25, 0xF0	; 240
 3a0:	89 2b       	or	r24, r25
 3a2:	8b bb       	out	0x1b, r24	; 27
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, LCD_E_HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_Write_Char+0x6e>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_Write_Char+0x74>
 3b8:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, LCD_E_LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	9e e4       	ldi	r25, 0x4E	; 78
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_Write_Char+0x84>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_Write_Char+0x8a>
 3ce:	00 00       	nop

		LCD_8BIT_MODE_D_PORT = data;
		_delay_ms(5);

	#endif
}
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <main>:
#include "LCD_HAL.h"
#include "UART.h"

int main(void)
{
	LCD_Init();
 3d4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Init>
	UART_Init();
 3d8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Init>
	uint8 data = 0;
	
 
    while (1) 
    {
		data = UART_Rx();
 3dc:	0e 94 14 02 	call	0x428	; 0x428 <UART_Rx>
		if (data)
 3e0:	88 23       	and	r24, r24
 3e2:	e1 f3       	breq	.-8      	; 0x3dc <main+0x8>
		{
			LCD_Write_Char(data);
 3e4:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Write_Char>
 3e8:	f9 cf       	rjmp	.-14     	; 0x3dc <main+0x8>

000003ea <UART_Init>:
void UART_Init(void)
{
	uint32 UBRR_Val = 0;
	
	//Tx Pin output
	SET_BIT(DDRD,1);
 3ea:	89 9a       	sbi	0x11, 1	; 17
	//Rx Pin output
	CLR_BIT(DDRD,0);
 3ec:	88 98       	cbi	0x11, 0	; 17
	
	//Enable Tx
	SET_BIT(UCSRB, 4);
 3ee:	54 9a       	sbi	0x0a, 4	; 10
	
	//Enable Rx
	SET_BIT(UCSRB, 3);
 3f0:	53 9a       	sbi	0x0a, 3	; 10
	
	//Stop Bit 1-bit
	CLR_BIT(UCSRC, 3);
 3f2:	80 b5       	in	r24, 0x20	; 32
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	80 bd       	out	0x20, r24	; 32
	//Asynchronous 
	CLR_BIT(UCSRC, 6);
 3f8:	80 b5       	in	r24, 0x20	; 32
 3fa:	8f 7b       	andi	r24, 0xBF	; 191
 3fc:	80 bd       	out	0x20, r24	; 32
	//Parity Mode Disable
	CLR_BIT(UCSRC, 4);
 3fe:	80 b5       	in	r24, 0x20	; 32
 400:	8f 7e       	andi	r24, 0xEF	; 239
 402:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC, 5);
 404:	80 b5       	in	r24, 0x20	; 32
 406:	8f 7d       	andi	r24, 0xDF	; 223
 408:	80 bd       	out	0x20, r24	; 32
	
	//Data Bits 8-bit Mode
	SET_BIT(UCSRC, 1);
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC, 2);
 410:	80 b5       	in	r24, 0x20	; 32
 412:	84 60       	ori	r24, 0x04	; 4
 414:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRB, 2);
 416:	52 98       	cbi	0x0a, 2	; 10
	SET_BIT(UCSRC, 1);
 418:	80 b5       	in	r24, 0x20	; 32
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	80 bd       	out	0x20, r24	; 32
	/*//Or we can replace it with
	UCSRC |= 0x86;*/
	
	//Set Baud Rate
	UBRR_Val = (160000 / (16 * 96) ) - 1;
	UBRR = UBRR_Val;
 41e:	87 e6       	ldi	r24, 0x67	; 103
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	9a b9       	out	0x0a, r25	; 10
 424:	89 b9       	out	0x09, r24	; 9
 426:	08 95       	ret

00000428 <UART_Rx>:
}

uint8 UART_Rx (void)
{
	uint8 data = 0;
	while (GET_BIT(UCSRA,5) == 0);
 428:	5d 9b       	sbis	0x0b, 5	; 11
 42a:	fe cf       	rjmp	.-4      	; 0x428 <UART_Rx>
	
	data = UDR;
 42c:	8c b1       	in	r24, 0x0c	; 12
	
	return data;
}
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
