
Timers_MCAL_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000446  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  000004ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4b  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a3  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c9  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002e27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_9>
  28:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_10>
  2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  74:	0c 94 21 02 	jmp	0x442	; 0x442 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
}


void DIO_SetPINDir(uint8 port, uint8 pin, uint8 direction)
{
	switch(direction)
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
	{
		case DIO_PIN_OUTPUT :
			switch(port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
			{
				case(DIO_PORTA):
					SET_BIT(DDRA,pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
					break;
  aa:	08 95       	ret
				
				case(DIO_PORTB):
					SET_BIT(DDRB,pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
					break;
  c0:	08 95       	ret
				
				case(DIO_PORTC):
					SET_BIT(DDRC,pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
					break;
  d6:	08 95       	ret
				
				case(DIO_PORTD):
					SET_BIT(DDRD,pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
					break;
  ec:	08 95       	ret
				break;
			}
			break;
		
		case(DIO_PIN_INPUT):
			switch(port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
			{
				case(DIO_PORTA):
					CLR_BIT(DDRA,pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
					break;
 114:	08 95       	ret
			
				case(DIO_PORTB):
					CLR_BIT(DDRB,pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
					break;
 12c:	08 95       	ret
			
				case(DIO_PORTC):
					CLR_BIT(DDRC,pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
					break;
 144:	08 95       	ret
				
				case(DIO_PORTD):
					CLR_BIT(DDRD,pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <main>:
extern uint32	NUM_OVF_1	;
extern uint32	INIT_VALUE_1 ;

int main(void)
{
	Timer_Init(Timer1);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 bb 00 	call	0x176	; 0x176 <Timer_Init>
	PWM_Generate(Timer1, 100);
 164:	64 e6       	ldi	r22, 0x64	; 100
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <PWM_Generate>
	Timer_Start(Timer1);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Timer_Start>
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x16>

00000176 <Timer_Init>:
	}
	
}

void Timer_SetDelay(uint8 Timer, uint32 Delay_Ms)
{
 176:	88 23       	and	r24, r24
 178:	19 f0       	breq	.+6      	; 0x180 <Timer_Init+0xa>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	99 f0       	breq	.+38     	; 0x1a4 <Timer_Init+0x2e>
 17e:	08 95       	ret
 180:	83 b7       	in	r24, 0x33	; 51
 182:	88 60       	ori	r24, 0x08	; 8
 184:	83 bf       	out	0x33, r24	; 51
 186:	83 b7       	in	r24, 0x33	; 51
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	83 bf       	out	0x33, r24	; 51
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 196:	83 b7       	in	r24, 0x33	; 51
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	83 bf       	out	0x33, r24	; 51
 19c:	83 b7       	in	r24, 0x33	; 51
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	83 bf       	out	0x33, r24	; 51
 1a2:	08 95       	ret
 1a4:	8f b5       	in	r24, 0x2f	; 47
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	8f bd       	out	0x2f, r24	; 47
 1aa:	8f b5       	in	r24, 0x2f	; 47
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	8f bd       	out	0x2f, r24	; 47
 1b0:	8e b5       	in	r24, 0x2e	; 46
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	8e bd       	out	0x2e, r24	; 46
 1b6:	8e b5       	in	r24, 0x2e	; 46
 1b8:	8f 7e       	andi	r24, 0xEF	; 239
 1ba:	8e bd       	out	0x2e, r24	; 46
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1c6:	8f b5       	in	r24, 0x2f	; 47
 1c8:	8f 7b       	andi	r24, 0xBF	; 191
 1ca:	8f bd       	out	0x2f, r24	; 47
 1cc:	8f b5       	in	r24, 0x2f	; 47
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	8f bd       	out	0x2f, r24	; 47
 1d2:	08 95       	ret

000001d4 <Timer_Start>:
 1d4:	88 23       	and	r24, r24
 1d6:	19 f0       	breq	.+6      	; 0x1de <Timer_Start+0xa>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	41 f0       	breq	.+16     	; 0x1ec <Timer_Start+0x18>
 1dc:	08 95       	ret
 1de:	83 b7       	in	r24, 0x33	; 51
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	83 bf       	out	0x33, r24	; 51
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	83 bf       	out	0x33, r24	; 51
 1ea:	08 95       	ret
 1ec:	8e b5       	in	r24, 0x2e	; 46
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8e bd       	out	0x2e, r24	; 46
 1f2:	8e b5       	in	r24, 0x2e	; 46
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	8e bd       	out	0x2e, r24	; 46
 1f8:	08 95       	ret

000001fa <PWM_Generate>:
		}
}

void PWM_Generate(uint8 Timer,uint16 Duty_Cycle)
{
	switch(Timer)
 1fa:	88 23       	and	r24, r24
 1fc:	19 f0       	breq	.+6      	; 0x204 <PWM_Generate+0xa>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	89 f0       	breq	.+34     	; 0x224 <PWM_Generate+0x2a>
 202:	08 95       	ret
	{
		case Timer0:
		#if			Timer0_PWM_WaveType			==		Non_Inverted
		OCR0 = ((Duty_Cycle*OVF_Ticks_T0)/100)-1;
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	36 2f       	mov	r19, r22
 20a:	36 95       	lsr	r19
 20c:	27 95       	ror	r18
 20e:	36 95       	lsr	r19
 210:	27 95       	ror	r18
 212:	ab e7       	ldi	r26, 0x7B	; 123
 214:	b4 e1       	ldi	r27, 0x14	; 20
 216:	0e 94 12 02 	call	0x424	; 0x424 <__umulhisi3>
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	8c bf       	out	0x3c, r24	; 60
		
		#elif		Timer0_PWM_WaveType			==		Inverted
		OCR0 = 255-((Duty_Cycle * OVF_Ticks_T0)/100);
		#endif
		break;
 222:	08 95       	ret
		
		case Timer1:
		#if			Timer1_PWM_WaveType			==		Non_Inverted
		OCR1A = ((Duty_Cycle * OVF_Ticks_T1)/100)-1;
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	36 2f       	mov	r19, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	ab e7       	ldi	r26, 0x7B	; 123
 234:	b4 e1       	ldi	r27, 0x14	; 20
 236:	0e 94 12 02 	call	0x424	; 0x424 <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	9b bd       	out	0x2b, r25	; 43
 242:	8a bd       	out	0x2a, r24	; 42
 244:	08 95       	ret

00000246 <__vector_11>:
		break;
	}
}

ISR(TIMER0_OVF_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 268:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1715>
 26c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1715+0x1>
 270:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1715+0x2>
 274:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1715+0x3>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	a1 1d       	adc	r26, r1
 27c:	b1 1d       	adc	r27, r1
 27e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1715>
 282:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1715+0x1>
 286:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1715+0x2>
 28a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1715+0x3>
	
	if(cnt == NUM_OVF_0)
 28e:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 292:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 296:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 29a:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 29e:	84 17       	cp	r24, r20
 2a0:	95 07       	cpc	r25, r21
 2a2:	a6 07       	cpc	r26, r22
 2a4:	b7 07       	cpc	r27, r23
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <__vector_11+0x7e>
	{
		cnt = 0;
 2a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1715>
 2ac:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1715+0x1>
 2b0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1715+0x2>
 2b4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1715+0x3>
		(*PTR_0)();
 2b8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 2bc:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 2c0:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 2c2:	82 b7       	in	r24, 0x32	; 50
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
	(*PTR_0)();
 308:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 30c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 310:	09 95       	icall
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 356:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 35a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 35e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 362:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 370:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 374:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 378:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 37c:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 380:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 384:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 388:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 38c:	84 17       	cp	r24, r20
 38e:	95 07       	cpc	r25, r21
 390:	a6 07       	cpc	r26, r22
 392:	b7 07       	cpc	r27, r23
 394:	79 f4       	brne	.+30     	; 0x3b4 <__vector_9+0x80>
	{
		cnt = 0;
 396:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 39a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 39e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 3a6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 3aa:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 3ae:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 3b0:	8c b5       	in	r24, 0x2c	; 44
 3b2:	9d b5       	in	r25, 0x2d	; 45
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	(*PTR_1)();
 3f8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 3fc:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 400:	09 95       	icall
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <__umulhisi3>:
 424:	a2 9f       	mul	r26, r18
 426:	b0 01       	movw	r22, r0
 428:	b3 9f       	mul	r27, r19
 42a:	c0 01       	movw	r24, r0
 42c:	a3 9f       	mul	r26, r19
 42e:	70 0d       	add	r23, r0
 430:	81 1d       	adc	r24, r1
 432:	11 24       	eor	r1, r1
 434:	91 1d       	adc	r25, r1
 436:	b2 9f       	mul	r27, r18
 438:	70 0d       	add	r23, r0
 43a:	81 1d       	adc	r24, r1
 43c:	11 24       	eor	r1, r1
 43e:	91 1d       	adc	r25, r1
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
