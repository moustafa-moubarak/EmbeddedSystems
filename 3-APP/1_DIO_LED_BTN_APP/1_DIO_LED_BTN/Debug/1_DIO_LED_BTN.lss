
1_DIO_LED_BTN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed2  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b1  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074d  00000000  00000000  00001bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000462  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b4  00000000  00000000  000028ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  64:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BTN_INIT>:

#include "BTN_HAL.h"

void BTN_INIT(uint8 BTN)
{
	switch (BTN)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	51 f0       	breq	.+20     	; 0x84 <BTN_INIT+0x18>
  70:	18 f0       	brcs	.+6      	; 0x78 <BTN_INIT+0xc>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	69 f0       	breq	.+26     	; 0x90 <BTN_INIT+0x24>
  76:	08 95       	ret
	{
		case BTN0:
			DIO_SetPINDir(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT);
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
			break;
  82:	08 95       	ret
			
		case BTN1:
			DIO_SetPINDir(DIO_PORTB, DIO_PIN4, DIO_PIN_INPUT);		
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	64 e0       	ldi	r22, 0x04	; 4
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
			break;
  8e:	08 95       	ret
		
		case BTN2:
			DIO_SetPINDir(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
  9a:	08 95       	ret

0000009c <BTN_GetValue>:
			break;
	}
}

uint8 BTN_GetValue(uint8 BTN)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	1f 92       	push	r1
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	switch(BTN)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	d1 f0       	breq	.+52     	; 0xde <BTN_GetValue+0x42>
  aa:	18 f0       	brcs	.+6      	; 0xb2 <BTN_GetValue+0x16>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	69 f1       	breq	.+90     	; 0x10a <BTN_GetValue+0x6e>
  b0:	42 c0       	rjmp	.+132    	; 0x136 <BTN_GetValue+0x9a>
	{
		uint8 value = 0;
		case BTN0:
			DIO_ReadPinValue(DIO_PORTB, DIO_PIN0, &value);
  b2:	ae 01       	movw	r20, r28
  b4:	4f 5f       	subi	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 10 01 	call	0x220	; 0x220 <DIO_ReadPinValue>
			while (GET_BIT(PINB,0) == 1)
  c0:	b0 9b       	sbis	0x16, 0	; 22
  c2:	0b c0       	rjmp	.+22     	; 0xda <BTN_GetValue+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <BTN_GetValue+0x2e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <BTN_GetValue+0x38>
  d4:	00 00       	nop
  d6:	b0 99       	sbic	0x16, 0	; 22
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <BTN_GetValue+0x28>
			_delay_ms(20);
			return value;
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	2c c0       	rjmp	.+88     	; 0x136 <BTN_GetValue+0x9a>
		break;
			
		case BTN1:
			DIO_ReadPinValue(DIO_PORTB, DIO_PIN4, &value);
  de:	ae 01       	movw	r20, r28
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 10 01 	call	0x220	; 0x220 <DIO_ReadPinValue>
			while (GET_BIT(PINB,4) == 1)
  ec:	b4 9b       	sbis	0x16, 4	; 22
  ee:	0b c0       	rjmp	.+22     	; 0x106 <BTN_GetValue+0x6a>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <BTN_GetValue+0x5a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <BTN_GetValue+0x64>
 100:	00 00       	nop
 102:	b4 99       	sbic	0x16, 4	; 22
 104:	f5 cf       	rjmp	.-22     	; 0xf0 <BTN_GetValue+0x54>
			_delay_ms(20);
			
			return value;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	16 c0       	rjmp	.+44     	; 0x136 <BTN_GetValue+0x9a>
		break;
		
		case BTN2:
			DIO_ReadPinValue(DIO_PORTD, DIO_PIN2, &value);
 10a:	ae 01       	movw	r20, r28
 10c:	4f 5f       	subi	r20, 0xFF	; 255
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 10 01 	call	0x220	; 0x220 <DIO_ReadPinValue>
			while (GET_BIT(PIND,2) == 1)
 118:	82 9b       	sbis	0x10, 2	; 16
 11a:	0b c0       	rjmp	.+22     	; 0x132 <BTN_GetValue+0x96>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <BTN_GetValue+0x86>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <BTN_GetValue+0x90>
 12c:	00 00       	nop
 12e:	82 99       	sbic	0x10, 2	; 16
 130:	f5 cf       	rjmp	.-22     	; 0x11c <BTN_GetValue+0x80>
			_delay_ms(20);
		
			return value;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	00 c0       	rjmp	.+0      	; 0x136 <BTN_GetValue+0x9a>
		break;
	}
}
 136:	0f 90       	pop	r0
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <DIO_SetPINDir>:
		case (DIO_PORTC):
		*recall_value = PINC;
		break;
		
		case (DIO_PORTD):
		*recall_value = PIND;
 13e:	44 23       	and	r20, r20
 140:	b9 f1       	breq	.+110    	; 0x1b0 <DIO_SetPINDir+0x72>
 142:	41 30       	cpi	r20, 0x01	; 1
 144:	09 f0       	breq	.+2      	; 0x148 <DIO_SetPINDir+0xa>
 146:	6b c0       	rjmp	.+214    	; 0x21e <DIO_SetPINDir+0xe0>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	89 f0       	breq	.+34     	; 0x16e <DIO_SetPINDir+0x30>
 14c:	28 f0       	brcs	.+10     	; 0x158 <DIO_SetPINDir+0x1a>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	c9 f0       	breq	.+50     	; 0x184 <DIO_SetPINDir+0x46>
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	11 f1       	breq	.+68     	; 0x19a <DIO_SetPINDir+0x5c>
 156:	08 95       	ret
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_SetPINDir+0x26>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_SetPINDir+0x22>
 168:	82 2b       	or	r24, r18
 16a:	8a bb       	out	0x1a, r24	; 26
 16c:	08 95       	ret
 16e:	27 b3       	in	r18, 0x17	; 23
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPINDir+0x3c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPINDir+0x38>
 17e:	82 2b       	or	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
 182:	08 95       	ret
 184:	24 b3       	in	r18, 0x14	; 20
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SetPINDir+0x52>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SetPINDir+0x4e>
 194:	82 2b       	or	r24, r18
 196:	84 bb       	out	0x14, r24	; 20
 198:	08 95       	ret
 19a:	21 b3       	in	r18, 0x11	; 17
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SetPINDir+0x68>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SetPINDir+0x64>
 1aa:	82 2b       	or	r24, r18
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <DIO_SetPINDir+0x9a>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_SetPINDir+0x82>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	d9 f0       	breq	.+54     	; 0x1f0 <DIO_SetPINDir+0xb2>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	29 f1       	breq	.+74     	; 0x208 <DIO_SetPINDir+0xca>
 1be:	08 95       	ret
 1c0:	2a b3       	in	r18, 0x1a	; 26
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPINDir+0x8e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPINDir+0x8a>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8a bb       	out	0x1a, r24	; 26
 1d6:	08 95       	ret
 1d8:	27 b3       	in	r18, 0x17	; 23
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPINDir+0xa6>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPINDir+0xa2>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	87 bb       	out	0x17, r24	; 23
 1ee:	08 95       	ret
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SetPINDir+0xbe>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SetPINDir+0xba>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	84 bb       	out	0x14, r24	; 20
 206:	08 95       	ret
 208:	21 b3       	in	r18, 0x11	; 17
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPINDir+0xd6>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPINDir+0xd2>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	81 bb       	out	0x11, r24	; 17
 21e:	08 95       	ret

00000220 <DIO_ReadPinValue>:
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	89 f0       	breq	.+34     	; 0x246 <DIO_ReadPinValue+0x26>
 224:	28 f0       	brcs	.+10     	; 0x230 <DIO_ReadPinValue+0x10>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	c9 f0       	breq	.+50     	; 0x25c <DIO_ReadPinValue+0x3c>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	11 f1       	breq	.+68     	; 0x272 <DIO_ReadPinValue+0x52>
 22e:	08 95       	ret
 230:	89 b3       	in	r24, 0x19	; 25
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_ReadPinValue+0x1a>
 236:	95 95       	asr	r25
 238:	87 95       	ror	r24
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_ReadPinValue+0x16>
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	fa 01       	movw	r30, r20
 242:	80 83       	st	Z, r24
 244:	08 95       	ret
 246:	86 b3       	in	r24, 0x16	; 22
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_ReadPinValue+0x30>
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_ReadPinValue+0x2c>
 254:	81 70       	andi	r24, 0x01	; 1
 256:	fa 01       	movw	r30, r20
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret
 25c:	83 b3       	in	r24, 0x13	; 19
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_ReadPinValue+0x46>
 262:	95 95       	asr	r25
 264:	87 95       	ror	r24
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_ReadPinValue+0x42>
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	fa 01       	movw	r30, r20
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret
 272:	80 b3       	in	r24, 0x10	; 16
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_ReadPinValue+0x5c>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_ReadPinValue+0x58>
 280:	81 70       	andi	r24, 0x01	; 1
 282:	fa 01       	movw	r30, r20
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <DIO_TogglePin>:
	}
}

void DIO_TogglePin(uint8 port, uint8 pin)
{
	switch(port)
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	89 f0       	breq	.+34     	; 0x2ae <DIO_TogglePin+0x26>
 28c:	28 f0       	brcs	.+10     	; 0x298 <DIO_TogglePin+0x10>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	c9 f0       	breq	.+50     	; 0x2c4 <DIO_TogglePin+0x3c>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	11 f1       	breq	.+68     	; 0x2da <DIO_TogglePin+0x52>
 296:	08 95       	ret
	{
		case DIO_PORTA:
			Toggle_BIT(PORTA,pin);
 298:	2b b3       	in	r18, 0x1b	; 27
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_TogglePin+0x1c>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_TogglePin+0x18>
 2a8:	82 27       	eor	r24, r18
 2aa:	8b bb       	out	0x1b, r24	; 27
			break;
 2ac:	08 95       	ret
			
		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 2ae:	28 b3       	in	r18, 0x18	; 24
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_TogglePin+0x32>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_TogglePin+0x2e>
 2be:	82 27       	eor	r24, r18
 2c0:	88 bb       	out	0x18, r24	; 24
		break;
 2c2:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 2c4:	25 b3       	in	r18, 0x15	; 21
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_TogglePin+0x48>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_TogglePin+0x44>
 2d4:	82 27       	eor	r24, r18
 2d6:	85 bb       	out	0x15, r24	; 21
		break;
 2d8:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 2da:	22 b3       	in	r18, 0x12	; 18
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_TogglePin+0x5e>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_TogglePin+0x5a>
 2ea:	82 27       	eor	r24, r18
 2ec:	82 bb       	out	0x12, r24	; 18
 2ee:	08 95       	ret

000002f0 <LED_Init>:
			break;
		case LED1:
			DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
			break;
		case LED2:
			DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);		
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	51 f0       	breq	.+20     	; 0x308 <LED_Init+0x18>
 2f4:	18 f0       	brcs	.+6      	; 0x2fc <LED_Init+0xc>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	69 f0       	breq	.+26     	; 0x314 <LED_Init+0x24>
 2fa:	08 95       	ret
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
 306:	08 95       	ret
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	67 e0       	ldi	r22, 0x07	; 7
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
 312:	08 95       	ret
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	0e 94 9f 00 	call	0x13e	; 0x13e <DIO_SetPINDir>
 31e:	08 95       	ret

00000320 <LED_Toggle>:
	}
}

void LED_Toggle(uint8 LED)
{
	switch (LED)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	49 f0       	breq	.+18     	; 0x336 <LED_Toggle+0x16>
 324:	18 f0       	brcs	.+6      	; 0x32c <LED_Toggle+0xc>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	59 f0       	breq	.+22     	; 0x340 <LED_Toggle+0x20>
 32a:	08 95       	ret
	{
		case LED0:
			DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 44 01 	call	0x288	; 0x288 <DIO_TogglePin>
			break;
 334:	08 95       	ret
		case LED1:
			DIO_TogglePin(DIO_PORTC,DIO_PIN7);
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 44 01 	call	0x288	; 0x288 <DIO_TogglePin>
			break;
 33e:	08 95       	ret
		case LED2: 
			DIO_TogglePin(DIO_PORTD,DIO_PIN3);
 340:	63 e0       	ldi	r22, 0x03	; 3
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 44 01 	call	0x288	; 0x288 <DIO_TogglePin>
 348:	08 95       	ret

0000034a <main>:
#include "LED_HAL.h"
#include "BTN_HAL.h"

int main(void)
{
	LED_Init(LED0);	
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	BTN_INIT(BTN0);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 36 00 	call	0x6c	; 0x6c <BTN_INIT>
	LED_Init(LED1);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	BTN_INIT(BTN1);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 36 00 	call	0x6c	; 0x6c <BTN_INIT>
	LED_Init(LED2);
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	BTN_INIT(BTN2);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	0e 94 36 00 	call	0x6c	; 0x6c <BTN_INIT>
	uint8 val1;
	uint8 val2;
    
	while (1) 
    {
		val0 = BTN_GetValue(BTN0);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 4e 00 	call	0x9c	; 0x9c <BTN_GetValue>
		
		if (val0 == 1)
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	21 f4       	brne	.+8      	; 0x386 <main+0x3c>
		{
			LED_Toggle(LED0);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 90 01 	call	0x320	; 0x320 <LED_Toggle>
		}
		val1 = BTN_GetValue(BTN1);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 4e 00 	call	0x9c	; 0x9c <BTN_GetValue>
		
		if (val1 == 1)
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	21 f4       	brne	.+8      	; 0x398 <main+0x4e>
		{
			LED_Toggle(LED1);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 90 01 	call	0x320	; 0x320 <LED_Toggle>
		}
		val2 = BTN_GetValue(BTN2);
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 4e 00 	call	0x9c	; 0x9c <BTN_GetValue>
		
		if (val2 == 1)
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	49 f7       	brne	.-46     	; 0x374 <main+0x2a>
		{
			LED_Toggle(LED2);
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 90 01 	call	0x320	; 0x320 <LED_Toggle>
 3aa:	e4 cf       	rjmp	.-56     	; 0x374 <main+0x2a>

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
