
Timers_MCAL_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9f  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c6  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c9  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_9>
  28:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_10>
  2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  74:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
}


void DIO_SetPINDir(uint8 port, uint8 pin, uint8 direction)
{
	switch(direction)
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
	{
		case DIO_PIN_OUTPUT :
			switch(port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
			{
				case(DIO_PORTA):
					SET_BIT(DDRA,pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
					break;
  aa:	08 95       	ret
				
				case(DIO_PORTB):
					SET_BIT(DDRB,pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
					break;
  c0:	08 95       	ret
				
				case(DIO_PORTC):
					SET_BIT(DDRC,pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
					break;
  d6:	08 95       	ret
				
				case(DIO_PORTD):
					SET_BIT(DDRD,pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
					break;
  ec:	08 95       	ret
				break;
			}
			break;
		
		case(DIO_PIN_INPUT):
			switch(port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
			{
				case(DIO_PORTA):
					CLR_BIT(DDRA,pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
					break;
 114:	08 95       	ret
			
				case(DIO_PORTB):
					CLR_BIT(DDRB,pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
					break;
 12c:	08 95       	ret
			
				case(DIO_PORTC):
					CLR_BIT(DDRC,pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
					break;
 144:	08 95       	ret
				
				case(DIO_PORTD):
					CLR_BIT(DDRD,pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <main>:
extern uint32	NUM_OVF_1	;
extern uint32	INIT_VALUE_1 ;

int main(void)
{	
	Timer_Init(Timer1);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 bf 00 	call	0x17e	; 0x17e <Timer_Init>
	PWM_Freq_Generate(50);
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 04 01 	call	0x208	; 0x208 <PWM_Freq_Generate>
	Timer_Start(Timer1);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Timer_Start>
	PWM_Generate(Timer1,7.5);
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 12 01 	call	0x224	; 0x224 <PWM_Generate>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x1e>

0000017e <Timer_Init>:
	}
	
}

void Timer_SetDelay(uint8 Timer, uint32 Delay_Ms)
{
 17e:	88 23       	and	r24, r24
 180:	19 f0       	breq	.+6      	; 0x188 <Timer_Init+0xa>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	99 f0       	breq	.+38     	; 0x1ac <Timer_Init+0x2e>
 186:	08 95       	ret
 188:	83 b7       	in	r24, 0x33	; 51
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	83 bf       	out	0x33, r24	; 51
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	80 64       	ori	r24, 0x40	; 64
 192:	83 bf       	out	0x33, r24	; 51
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	83 bf       	out	0x33, r24	; 51
 1a4:	83 b7       	in	r24, 0x33	; 51
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	83 bf       	out	0x33, r24	; 51
 1aa:	08 95       	ret
 1ac:	8f b5       	in	r24, 0x2f	; 47
 1ae:	8e 7f       	andi	r24, 0xFE	; 254
 1b0:	8f bd       	out	0x2f, r24	; 47
 1b2:	8f b5       	in	r24, 0x2f	; 47
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	8f bd       	out	0x2f, r24	; 47
 1b8:	8e b5       	in	r24, 0x2e	; 46
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8e bd       	out	0x2e, r24	; 46
 1be:	8e b5       	in	r24, 0x2e	; 46
 1c0:	80 61       	ori	r24, 0x10	; 16
 1c2:	8e bd       	out	0x2e, r24	; 46
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1ce:	8f b5       	in	r24, 0x2f	; 47
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	8f bd       	out	0x2f, r24	; 47
 1d4:	8f b5       	in	r24, 0x2f	; 47
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8f bd       	out	0x2f, r24	; 47
 1da:	08 95       	ret

000001dc <Timer_Start>:
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <Timer_Start+0xa>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	41 f0       	breq	.+16     	; 0x1f4 <Timer_Start+0x18>
 1e4:	08 95       	ret
 1e6:	83 b7       	in	r24, 0x33	; 51
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	83 bf       	out	0x33, r24	; 51
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	8d 7f       	andi	r24, 0xFD	; 253
 1f0:	83 bf       	out	0x33, r24	; 51
 1f2:	08 95       	ret
 1f4:	8e b5       	in	r24, 0x2e	; 46
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	8e bd       	out	0x2e, r24	; 46
 1fa:	8e b5       	in	r24, 0x2e	; 46
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	8e bd       	out	0x2e, r24	; 46
 200:	8e b5       	in	r24, 0x2e	; 46
 202:	84 60       	ori	r24, 0x04	; 4
 204:	8e bd       	out	0x2e, r24	; 46
 206:	08 95       	ret

00000208 <PWM_Freq_Generate>:
		}
}

void PWM_Freq_Generate(uint16 Freq)
{
	ICR1 = (16000000/(PRESCALER_FACTOR_T1*Freq));
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	38 2f       	mov	r19, r24
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	74 e2       	ldi	r23, 0x24	; 36
 216:	84 ef       	ldi	r24, 0xF4	; 244
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 2d 02 	call	0x45a	; 0x45a <__divmodsi4>
 21e:	37 bd       	out	0x27, r19	; 39
 220:	26 bd       	out	0x26, r18	; 38
 222:	08 95       	ret

00000224 <PWM_Generate>:
}

void PWM_Generate(uint8 Timer,uint16 Duty_Cycle)
{
	switch(Timer)
 224:	88 23       	and	r24, r24
 226:	19 f0       	breq	.+6      	; 0x22e <PWM_Generate+0xa>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	89 f0       	breq	.+34     	; 0x24e <PWM_Generate+0x2a>
 22c:	08 95       	ret
	{
		case Timer0:
		#if			Timer0_PWM_WaveType			==		Non_Inverted
		OCR0 = ((Duty_Cycle*OVF_Ticks_T0)/100)-1;
 22e:	76 2f       	mov	r23, r22
 230:	66 27       	eor	r22, r22
 232:	9b 01       	movw	r18, r22
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	ab e7       	ldi	r26, 0x7B	; 123
 23e:	b4 e1       	ldi	r27, 0x14	; 20
 240:	0e 94 4c 02 	call	0x498	; 0x498 <__umulhisi3>
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	8c bf       	out	0x3c, r24	; 60
		
		#elif		Timer0_PWM_WaveType			==		Inverted
		OCR0 = 255-((Duty_Cycle * OVF_Ticks_T0)/100);
		#endif
		break;
 24c:	08 95       	ret
		
		case Timer1:
		#if			Timer1_PWM_WaveType			==		Non_Inverted
		OCR1A = ((Duty_Cycle * OVF_Ticks_T1)/100)-1;
 24e:	82 ee       	ldi	r24, 0xE2	; 226
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	68 9f       	mul	r22, r24
 254:	90 01       	movw	r18, r0
 256:	69 9f       	mul	r22, r25
 258:	30 0d       	add	r19, r0
 25a:	78 9f       	mul	r23, r24
 25c:	30 0d       	add	r19, r0
 25e:	11 24       	eor	r1, r1
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	36 95       	lsr	r19
 266:	27 95       	ror	r18
 268:	ab e7       	ldi	r26, 0x7B	; 123
 26a:	b4 e1       	ldi	r27, 0x14	; 20
 26c:	0e 94 4c 02 	call	0x498	; 0x498 <__umulhisi3>
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	9b bd       	out	0x2b, r25	; 43
 278:	8a bd       	out	0x2a, r24	; 42
 27a:	08 95       	ret

0000027c <__vector_11>:
		break;
	}
}

ISR(TIMER0_OVF_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 29e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1712>
 2a2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1712+0x1>
 2a6:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1712+0x2>
 2aa:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1712+0x3>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	a1 1d       	adc	r26, r1
 2b2:	b1 1d       	adc	r27, r1
 2b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1712>
 2b8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1712+0x1>
 2bc:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1712+0x2>
 2c0:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1712+0x3>
	
	if(cnt == NUM_OVF_0)
 2c4:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 2c8:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 2cc:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 2d0:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 2d4:	84 17       	cp	r24, r20
 2d6:	95 07       	cpc	r25, r21
 2d8:	a6 07       	cpc	r26, r22
 2da:	b7 07       	cpc	r27, r23
 2dc:	71 f4       	brne	.+28     	; 0x2fa <__vector_11+0x7e>
	{
		cnt = 0;
 2de:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1712>
 2e2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1712+0x1>
 2e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1712+0x2>
 2ea:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1712+0x3>
		(*PTR_0)();
 2ee:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 2f2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 2f6:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 2f8:	82 b7       	in	r24, 0x32	; 50
	}
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	(*PTR_0)();
 33e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 342:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 346:	09 95       	icall
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	4f 93       	push	r20
 37a:	5f 93       	push	r21
 37c:	6f 93       	push	r22
 37e:	7f 93       	push	r23
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	af 93       	push	r26
 386:	bf 93       	push	r27
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 38c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 390:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 394:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 398:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3aa:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3ae:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 3b2:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 3b6:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 3ba:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 3be:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 3c2:	84 17       	cp	r24, r20
 3c4:	95 07       	cpc	r25, r21
 3c6:	a6 07       	cpc	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	79 f4       	brne	.+30     	; 0x3ea <__vector_9+0x80>
	{
		cnt = 0;
 3cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3d8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 3dc:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 3e0:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 3e4:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 3e6:	8c b5       	in	r24, 0x2c	; 44
 3e8:	9d b5       	in	r25, 0x2d	; 45
	}
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	4f 93       	push	r20
 41c:	5f 93       	push	r21
 41e:	6f 93       	push	r22
 420:	7f 93       	push	r23
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	(*PTR_1)();
 42e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 432:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 436:	09 95       	icall
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__divmodsi4>:
 45a:	05 2e       	mov	r0, r21
 45c:	97 fb       	bst	r25, 7
 45e:	1e f4       	brtc	.+6      	; 0x466 <__divmodsi4+0xc>
 460:	00 94       	com	r0
 462:	0e 94 44 02 	call	0x488	; 0x488 <__negsi2>
 466:	57 fd       	sbrc	r21, 7
 468:	07 d0       	rcall	.+14     	; 0x478 <__divmodsi4_neg2>
 46a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmodsi4>
 46e:	07 fc       	sbrc	r0, 7
 470:	03 d0       	rcall	.+6      	; 0x478 <__divmodsi4_neg2>
 472:	4e f4       	brtc	.+18     	; 0x486 <__divmodsi4_exit>
 474:	0c 94 44 02 	jmp	0x488	; 0x488 <__negsi2>

00000478 <__divmodsi4_neg2>:
 478:	50 95       	com	r21
 47a:	40 95       	com	r20
 47c:	30 95       	com	r19
 47e:	21 95       	neg	r18
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	4f 4f       	sbci	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255

00000486 <__divmodsi4_exit>:
 486:	08 95       	ret

00000488 <__negsi2>:
 488:	90 95       	com	r25
 48a:	80 95       	com	r24
 48c:	70 95       	com	r23
 48e:	61 95       	neg	r22
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__umulhisi3>:
 498:	a2 9f       	mul	r26, r18
 49a:	b0 01       	movw	r22, r0
 49c:	b3 9f       	mul	r27, r19
 49e:	c0 01       	movw	r24, r0
 4a0:	a3 9f       	mul	r26, r19
 4a2:	70 0d       	add	r23, r0
 4a4:	81 1d       	adc	r24, r1
 4a6:	11 24       	eor	r1, r1
 4a8:	91 1d       	adc	r25, r1
 4aa:	b2 9f       	mul	r27, r18
 4ac:	70 0d       	add	r23, r0
 4ae:	81 1d       	adc	r24, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	91 1d       	adc	r25, r1
 4b4:	08 95       	ret

000004b6 <__udivmodsi4>:
 4b6:	a1 e2       	ldi	r26, 0x21	; 33
 4b8:	1a 2e       	mov	r1, r26
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	fd 01       	movw	r30, r26
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <__udivmodsi4_ep>

000004c2 <__udivmodsi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	ee 1f       	adc	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	a2 17       	cp	r26, r18
 4cc:	b3 07       	cpc	r27, r19
 4ce:	e4 07       	cpc	r30, r20
 4d0:	f5 07       	cpc	r31, r21
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__udivmodsi4_ep>
 4d4:	a2 1b       	sub	r26, r18
 4d6:	b3 0b       	sbc	r27, r19
 4d8:	e4 0b       	sbc	r30, r20
 4da:	f5 0b       	sbc	r31, r21

000004dc <__udivmodsi4_ep>:
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a 94       	dec	r1
 4e6:	69 f7       	brne	.-38     	; 0x4c2 <__udivmodsi4_loop>
 4e8:	60 95       	com	r22
 4ea:	70 95       	com	r23
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	9b 01       	movw	r18, r22
 4f2:	ac 01       	movw	r20, r24
 4f4:	bd 01       	movw	r22, r26
 4f6:	cf 01       	movw	r24, r30
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
