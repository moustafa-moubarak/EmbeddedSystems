
Timers_MCAL_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f41  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b1  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e5  00000000  00000000  000030be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_9>
  28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_10>
  2c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  74:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
		case (DIO_PORTC):
		*recall_value = PINC;
		break;
		
		case (DIO_PORTD):
		*recall_value = PIND;
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin>:
	}
}

void DIO_TogglePin(uint8 port, uint8 pin)
{
	switch(port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin+0x52>
 16c:	08 95       	ret
	{
		case DIO_PORTA:
			Toggle_BIT(PORTA,pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
			break;
 182:	08 95       	ret
			
		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <Set_GlobalInterrupt>:
#include "EXT_INT.h"

void Set_GlobalInterrupt(void)
{
	#if		GLOBAL_INTERRUPT		==		GLOBAL_INTERRUPT_ENABLE	
		SET_BIT(SREG, 7);
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8f bf       	out	0x3f, r24	; 63
 1cc:	08 95       	ret

000001ce <LED0_Init>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
}

void LED0_OFF(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1d8:	08 95       	ret

000001da <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1e2:	08 95       	ret

000001e4 <main>:
extern uint32	NUM_OVF_1	;
extern uint32	INIT_VALUE_1 ;

int main(void)
{
	LED0_Init();
 1e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED0_Init>
	Timer_Init(Timer0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 07 01 	call	0x20e	; 0x20e <Timer_Init>
	Set_CallBack(Timer0, LED0_Toggle);
 1ee:	6d ee       	ldi	r22, 0xED	; 237
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 43 01 	call	0x286	; 0x286 <Set_CallBack>
	Timer_SetDelay(Timer0, 15); 
 1f8:	4f e0       	ldi	r20, 0x0F	; 15
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Timer_SetDelay>
	Timer_Start(Timer0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 2a 01 	call	0x254	; 0x254 <Timer_Start>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x28>

0000020e <Timer_Init>:
			CLR_BIT(TCCR0, 2);
			break;
		case Timer1:
			CLR_BIT(TCCR1B, 0);
			CLR_BIT(TCCR1B, 1);
			CLR_BIT(TCCR1B, 2);
 20e:	88 23       	and	r24, r24
 210:	19 f0       	breq	.+6      	; 0x218 <Timer_Init+0xa>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	69 f0       	breq	.+26     	; 0x230 <Timer_Init+0x22>
 216:	08 95       	ret
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	83 bf       	out	0x33, r24	; 51
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	8f 7b       	andi	r24, 0xBF	; 191
 222:	83 bf       	out	0x33, r24	; 51
 224:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Set_GlobalInterrupt>
 228:	89 b7       	in	r24, 0x39	; 57
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	89 bf       	out	0x39, r24	; 57
 22e:	08 95       	ret
 230:	8f b5       	in	r24, 0x2f	; 47
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	8f bd       	out	0x2f, r24	; 47
 236:	8f b5       	in	r24, 0x2f	; 47
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	8f bd       	out	0x2f, r24	; 47
 23c:	8e b5       	in	r24, 0x2e	; 46
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	8e bd       	out	0x2e, r24	; 46
 242:	8e b5       	in	r24, 0x2e	; 46
 244:	8f 7e       	andi	r24, 0xEF	; 239
 246:	8e bd       	out	0x2e, r24	; 46
 248:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Set_GlobalInterrupt>
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	89 bf       	out	0x39, r24	; 57
 252:	08 95       	ret

00000254 <Timer_Start>:
 254:	88 23       	and	r24, r24
 256:	19 f0       	breq	.+6      	; 0x25e <Timer_Start+0xa>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	59 f0       	breq	.+22     	; 0x272 <Timer_Start+0x1e>
 25c:	08 95       	ret
 25e:	83 b7       	in	r24, 0x33	; 51
 260:	81 60       	ori	r24, 0x01	; 1
 262:	83 bf       	out	0x33, r24	; 51
 264:	83 b7       	in	r24, 0x33	; 51
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	83 bf       	out	0x33, r24	; 51
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	83 bf       	out	0x33, r24	; 51
 270:	08 95       	ret
 272:	8e b5       	in	r24, 0x2e	; 46
 274:	81 60       	ori	r24, 0x01	; 1
 276:	8e bd       	out	0x2e, r24	; 46
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	8e bd       	out	0x2e, r24	; 46
 27e:	8e b5       	in	r24, 0x2e	; 46
 280:	84 60       	ori	r24, 0x04	; 4
 282:	8e bd       	out	0x2e, r24	; 46
 284:	08 95       	ret

00000286 <Set_CallBack>:
	}
}

Set_CallBack(uint8 Timer,void(* p)(void))
{
	switch(Timer)
 286:	88 23       	and	r24, r24
 288:	19 f0       	breq	.+6      	; 0x290 <Set_CallBack+0xa>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	29 f0       	breq	.+10     	; 0x298 <Set_CallBack+0x12>
 28e:	08 95       	ret
	{
		case Timer0:
			PTR_0 = p;
 290:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <PTR_0+0x1>
 294:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <PTR_0>
		case Timer1:
			PTR_1 = p;
 298:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <PTR_1+0x1>
 29c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <PTR_1>
	}
	
}
 2a0:	08 95       	ret

000002a2 <Timer_SetDelay>:

void Timer_SetDelay(uint8 Timer, uint32 Delay_Ms)
{
	switch(Timer)
 2a2:	88 23       	and	r24, r24
 2a4:	19 f0       	breq	.+6      	; 0x2ac <Timer_SetDelay+0xa>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	d1 f0       	breq	.+52     	; 0x2de <Timer_SetDelay+0x3c>
 2aa:	08 95       	ret
				{
					NUM_OVF_0++;
				}
				
			#elif	TIMER0_WAVEFORM_GEN_Mode	==		CTC
				if (Delay_Ms < 16)
 2ac:	40 31       	cpi	r20, 0x10	; 16
 2ae:	51 05       	cpc	r21, r1
 2b0:	61 05       	cpc	r22, r1
 2b2:	71 05       	cpc	r23, r1
 2b4:	78 f5       	brcc	.+94     	; 0x314 <Timer_SetDelay+0x72>
				{
					uint8 Tick_Time = PRESCALER_FACTOR_T0 / 16;
					uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time;
					OCR0 = Total_Ticks - 1;
 2b6:	a8 ee       	ldi	r26, 0xE8	; 232
 2b8:	b3 e0       	ldi	r27, 0x03	; 3
 2ba:	9a 01       	movw	r18, r20
 2bc:	ab 01       	movw	r20, r22
 2be:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__muluhisi3>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	68 94       	set
 2c8:	15 f8       	bld	r1, 5
 2ca:	b6 95       	lsr	r27
 2cc:	a7 95       	ror	r26
 2ce:	97 95       	ror	r25
 2d0:	87 95       	ror	r24
 2d2:	16 94       	lsr	r1
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <Timer_SetDelay+0x28>
 2d6:	6f ef       	ldi	r22, 0xFF	; 255
 2d8:	68 0f       	add	r22, r24
 2da:	6c bf       	out	0x3c, r22	; 60
 2dc:	08 95       	ret
				if(INIT_VALUE_1 != 0)
				{
					NUM_OVF_1++;
				}
			#elif	TIMER1_WAVEFORM_GEN_Mode	==		CTC
				if (Delay_Ms < 4000)
 2de:	40 3a       	cpi	r20, 0xA0	; 160
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	58 07       	cpc	r21, r24
 2e4:	61 05       	cpc	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	a8 f4       	brcc	.+42     	; 0x314 <Timer_SetDelay+0x72>
				{
					uint8 Tick_Time = PRESCALER_FACTOR_T1 / 16;
					uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time;
					OCR1A = Total_Ticks - 1;
 2ea:	a8 ee       	ldi	r26, 0xE8	; 232
 2ec:	b3 e0       	ldi	r27, 0x03	; 3
 2ee:	9a 01       	movw	r18, r20
 2f0:	ab 01       	movw	r20, r22
 2f2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__muluhisi3>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	68 94       	set
 2fc:	15 f8       	bld	r1, 5
 2fe:	b6 95       	lsr	r27
 300:	a7 95       	ror	r26
 302:	97 95       	ror	r25
 304:	87 95       	ror	r24
 306:	16 94       	lsr	r1
 308:	d1 f7       	brne	.-12     	; 0x2fe <Timer_SetDelay+0x5c>
 30a:	bc 01       	movw	r22, r24
 30c:	61 50       	subi	r22, 0x01	; 1
 30e:	71 09       	sbc	r23, r1
 310:	7b bd       	out	0x2b, r23	; 43
 312:	6a bd       	out	0x2a, r22	; 42
 314:	08 95       	ret

00000316 <__vector_11>:
			break;
		}
}

ISR(TIMER0_OVF_vect)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 338:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1682>
 33c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1682+0x1>
 340:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1682+0x2>
 344:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1682+0x3>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	a1 1d       	adc	r26, r1
 34c:	b1 1d       	adc	r27, r1
 34e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1682>
 352:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1682+0x1>
 356:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1682+0x2>
 35a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1682+0x3>
	
	if(cnt == NUM_OVF_0)
 35e:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 362:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 366:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 36a:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 36e:	84 17       	cp	r24, r20
 370:	95 07       	cpc	r25, r21
 372:	a6 07       	cpc	r26, r22
 374:	b7 07       	cpc	r27, r23
 376:	71 f4       	brne	.+28     	; 0x394 <__vector_11+0x7e>
	{
		cnt = 0;
 378:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1682>
 37c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1682+0x1>
 380:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1682+0x2>
 384:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1682+0x3>
		(*PTR_0)();
 388:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 38c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 390:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 392:	82 b7       	in	r24, 0x32	; 50
	}
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
	(*PTR_0)();
 3d8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 3dc:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 3e0:	09 95       	icall
}
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 426:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 42e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 432:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	a1 1d       	adc	r26, r1
 43a:	b1 1d       	adc	r27, r1
 43c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 440:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 444:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 448:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 44c:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 450:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 454:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 458:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 45c:	84 17       	cp	r24, r20
 45e:	95 07       	cpc	r25, r21
 460:	a6 07       	cpc	r26, r22
 462:	b7 07       	cpc	r27, r23
 464:	79 f4       	brne	.+30     	; 0x484 <__vector_9+0x80>
	{
		cnt = 0;
 466:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 46a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 46e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 472:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 476:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 47a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 47e:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 480:	8c b5       	in	r24, 0x2c	; 44
 482:	9d b5       	in	r25, 0x2d	; 45
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	(*PTR_1)();
 4c8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 4cc:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 4d0:	09 95       	icall
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__muluhisi3>:
 4f4:	0e 94 85 02 	call	0x50a	; 0x50a <__umulhisi3>
 4f8:	a5 9f       	mul	r26, r21
 4fa:	90 0d       	add	r25, r0
 4fc:	b4 9f       	mul	r27, r20
 4fe:	90 0d       	add	r25, r0
 500:	a4 9f       	mul	r26, r20
 502:	80 0d       	add	r24, r0
 504:	91 1d       	adc	r25, r1
 506:	11 24       	eor	r1, r1
 508:	08 95       	ret

0000050a <__umulhisi3>:
 50a:	a2 9f       	mul	r26, r18
 50c:	b0 01       	movw	r22, r0
 50e:	b3 9f       	mul	r27, r19
 510:	c0 01       	movw	r24, r0
 512:	a3 9f       	mul	r26, r19
 514:	70 0d       	add	r23, r0
 516:	81 1d       	adc	r24, r1
 518:	11 24       	eor	r1, r1
 51a:	91 1d       	adc	r25, r1
 51c:	b2 9f       	mul	r27, r18
 51e:	70 0d       	add	r23, r0
 520:	81 1d       	adc	r24, r1
 522:	11 24       	eor	r1, r1
 524:	91 1d       	adc	r25, r1
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
