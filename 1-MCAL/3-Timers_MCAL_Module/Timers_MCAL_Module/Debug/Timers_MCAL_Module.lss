
Timers_MCAL_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dca  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b9  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c1  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  74:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
		case (DIO_PORTC):
		*recall_value = PINC;
		break;
		
		case (DIO_PORTD):
		*recall_value = PIND;
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin>:
	}
}

void DIO_TogglePin(uint8 port, uint8 pin)
{
	switch(port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin+0x52>
 16c:	08 95       	ret
	{
		case DIO_PORTA:
			Toggle_BIT(PORTA,pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
			break;
 182:	08 95       	ret
			
		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <Set_GlobalInterrupt>:
#include "EXT_INT.h"

void Set_GlobalInterrupt(void)
{
	#if		GLOBAL_INTERRUPT		==		GLOBAL_INTERRUPT_ENABLE	
		SET_BIT(SREG, 7);
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8f bf       	out	0x3f, r24	; 63
 1cc:	08 95       	ret

000001ce <LED0_Init>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
}

void LED0_OFF(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1d8:	08 95       	ret

000001da <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1e2:	08 95       	ret

000001e4 <main>:
extern uint32	NUM_OVF	;
extern uint8	INIT_VALUE;

int main(void)
{
	LED0_Init();
 1e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED0_Init>
	Timer0_Init();
 1e8:	0e 94 4c 01 	call	0x298	; 0x298 <Timer0_Init>
	Timer0_SetDelay(2000); 
 1ec:	60 ed       	ldi	r22, 0xD0	; 208
 1ee:	77 e0       	ldi	r23, 0x07	; 7
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Timer0_SetDelay>
	Timer0_Start();
 1f8:	0e 94 9c 01 	call	0x338	; 0x338 <Timer0_Start>
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x18>

000001fe <__vector_11>:
    {
    }
}

ISR(TIMER0_OVF_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 220:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 224:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 228:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 22c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	a1 1d       	adc	r26, r1
 234:	b1 1d       	adc	r27, r1
 236:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 242:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF)
 246:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <NUM_OVF>
 24a:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <NUM_OVF+0x1>
 24e:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <NUM_OVF+0x2>
 252:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <NUM_OVF+0x3>
 256:	84 17       	cp	r24, r20
 258:	95 07       	cpc	r25, r21
 25a:	a6 07       	cpc	r26, r22
 25c:	b7 07       	cpc	r27, r23
 25e:	59 f4       	brne	.+22     	; 0x276 <__vector_11+0x78>
	{
		cnt = 0;
 260:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 264:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 268:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 26c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		LED0_Toggle();
 270:	0e 94 ed 00 	call	0x1da	; 0x1da <LED0_Toggle>
		TCNT0 - INIT_VALUE;
 274:	82 b7       	in	r24, 0x32	; 50
	}
	
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <Timer0_Init>:
uint8	INIT_VALUE	= 0;

void Timer0_Init(void)
{
	#if		WAVEFORM_GEN_Mode		==		Normal
		CLR_BIT(TCCR0, 3);
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, 6);
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, 6);
		SET_BIT(TCCR0, 3);
	#endif	
	
	//Enable Global Interrupt
	Set_GlobalInterrupt();
 2a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Set_GlobalInterrupt>
	
	//Enable Overflow Interrupt
	SET_BIT(TIMSK, 0);
 2a8:	89 b7       	in	r24, 0x39	; 57
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	89 bf       	out	0x39, r24	; 57
 2ae:	08 95       	ret

000002b0 <Timer0_SetDelay>:
}

void Timer0_SetDelay(uint32 Delay_Ms)
{
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	9b 01       	movw	r18, r22
 2b6:	ac 01       	movw	r20, r24
	uint8	Tick_Time = (PRESCALER_FACTOR/16);
	
	uint32	Total_Ticks = ((Delay_Ms * 1000)/Tick_Time);
 2b8:	a8 ee       	ldi	r26, 0xE8	; 232
 2ba:	b3 e0       	ldi	r27, 0x03	; 3
 2bc:	0e 94 a6 01 	call	0x34c	; 0x34c <__muluhisi3>
	
	NUM_OVF = Total_Ticks/OVF_Ticks ;
 2c0:	8b 01       	movw	r16, r22
 2c2:	9c 01       	movw	r18, r24
 2c4:	0f 2e       	mov	r0, r31
 2c6:	fe e0       	ldi	r31, 0x0E	; 14
 2c8:	36 95       	lsr	r19
 2ca:	27 95       	ror	r18
 2cc:	17 95       	ror	r17
 2ce:	07 95       	ror	r16
 2d0:	fa 95       	dec	r31
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <Timer0_SetDelay+0x18>
 2d4:	f0 2d       	mov	r31, r0
 2d6:	00 93 65 00 	sts	0x0065, r16	; 0x800065 <NUM_OVF>
 2da:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <NUM_OVF+0x1>
 2de:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <NUM_OVF+0x2>
 2e2:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <NUM_OVF+0x3>
	
	INIT_VALUE = 256 - (Total_Ticks % OVF_Ticks);
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	68 94       	set
 2ec:	15 f8       	bld	r1, 5
 2ee:	b6 95       	lsr	r27
 2f0:	a7 95       	ror	r26
 2f2:	97 95       	ror	r25
 2f4:	87 95       	ror	r24
 2f6:	16 94       	lsr	r1
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <Timer0_SetDelay+0x3e>
 2fa:	68 2f       	mov	r22, r24
 2fc:	61 95       	neg	r22
 2fe:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <INIT_VALUE>
	
	TCNT0	=	INIT_VALUE;
 302:	62 bf       	out	0x32, r22	; 50
	
	if(INIT_VALUE != 0)
 304:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <INIT_VALUE>
 308:	88 23       	and	r24, r24
 30a:	99 f0       	breq	.+38     	; 0x332 <Timer0_SetDelay+0x82>
	{
		NUM_OVF++;
 30c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <NUM_OVF>
 310:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <NUM_OVF+0x1>
 314:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <NUM_OVF+0x2>
 318:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <NUM_OVF+0x3>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a1 1d       	adc	r26, r1
 320:	b1 1d       	adc	r27, r1
 322:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <NUM_OVF>
 326:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <NUM_OVF+0x1>
 32a:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <NUM_OVF+0x2>
 32e:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <NUM_OVF+0x3>
	}
	
}
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <Timer0_Start>:
	CLR_BIT(TCCR0, 0);
	CLR_BIT(TCCR0, 1);
	SET_BIT(TCCR0, 2);
	
	#elif	TIMER0_PRESCALER		==		TIMER0_PRESCALER_1024
	SET_BIT(TCCR0, 0);
 338:	83 b7       	in	r24, 0x33	; 51
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 1);
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	8d 7f       	andi	r24, 0xFD	; 253
 342:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, 2);
 344:	83 b7       	in	r24, 0x33	; 51
 346:	84 60       	ori	r24, 0x04	; 4
 348:	83 bf       	out	0x33, r24	; 51
 34a:	08 95       	ret

0000034c <__muluhisi3>:
 34c:	0e 94 b1 01 	call	0x362	; 0x362 <__umulhisi3>
 350:	a5 9f       	mul	r26, r21
 352:	90 0d       	add	r25, r0
 354:	b4 9f       	mul	r27, r20
 356:	90 0d       	add	r25, r0
 358:	a4 9f       	mul	r26, r20
 35a:	80 0d       	add	r24, r0
 35c:	91 1d       	adc	r25, r1
 35e:	11 24       	eor	r1, r1
 360:	08 95       	ret

00000362 <__umulhisi3>:
 362:	a2 9f       	mul	r26, r18
 364:	b0 01       	movw	r22, r0
 366:	b3 9f       	mul	r27, r19
 368:	c0 01       	movw	r24, r0
 36a:	a3 9f       	mul	r26, r19
 36c:	70 0d       	add	r23, r0
 36e:	81 1d       	adc	r24, r1
 370:	11 24       	eor	r1, r1
 372:	91 1d       	adc	r25, r1
 374:	b2 9f       	mul	r27, r18
 376:	70 0d       	add	r23, r0
 378:	81 1d       	adc	r24, r1
 37a:	11 24       	eor	r1, r1
 37c:	91 1d       	adc	r25, r1
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
