
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000936  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca0  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073c  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000868  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_9>
  28:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_10>
  2c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  74:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPINDir>:
}


void DIO_SetPINDir(uint8 port, uint8 pin, uint8 direction)
{
	switch(direction)
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPINDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPINDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPINDir+0xe0>
	{
		case DIO_PIN_OUTPUT :
			switch(port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPINDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPINDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPINDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPINDir+0x5c>
  94:	08 95       	ret
			{
				case(DIO_PORTA):
					SET_BIT(DDRA,pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPINDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPINDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
					break;
  aa:	08 95       	ret
				
				case(DIO_PORTB):
					SET_BIT(DDRB,pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPINDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPINDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
					break;
  c0:	08 95       	ret
				
				case(DIO_PORTC):
					SET_BIT(DDRC,pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPINDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPINDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
					break;
  d6:	08 95       	ret
				
				case(DIO_PORTD):
					SET_BIT(DDRD,pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPINDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPINDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
					break;
  ec:	08 95       	ret
				break;
			}
			break;
		
		case(DIO_PIN_INPUT):
			switch(port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPINDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPINDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPINDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPINDir+0xca>
  fc:	08 95       	ret
			{
				case(DIO_PORTA):
					CLR_BIT(DDRA,pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPINDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPINDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
					break;
 114:	08 95       	ret
			
				case(DIO_PORTB):
					CLR_BIT(DDRB,pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPINDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPINDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
					break;
 12c:	08 95       	ret
			
				case(DIO_PORTC):
					CLR_BIT(DDRC,pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPINDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
					break;
 144:	08 95       	ret
				
				case(DIO_PORTD):
					CLR_BIT(DDRD,pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPINDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPINDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <main>:
#include "Servo_Motor.h"


int main(void)
{
	Servo_Motor_Init();
 15e:	0e 94 b8 00 	call	0x170	; 0x170 <Servo_Motor_Init>
	Servo_Motor_Rotate(20);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	80 ea       	ldi	r24, 0xA0	; 160
 168:	91 e4       	ldi	r25, 0x41	; 65
 16a:	0e 94 c3 00 	call	0x186	; 0x186 <Servo_Motor_Rotate>
 16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0x10>

00000170 <Servo_Motor_Init>:
 */ 
#include "Servo_Motor.h"

void Servo_Motor_Init(void)
{
	Timer_Init(Timer1);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Timer_Init>
	PWM_Freq_Generate(50);
 176:	82 e3       	ldi	r24, 0x32	; 50
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 20 01 	call	0x240	; 0x240 <PWM_Freq_Generate>
	Timer_Start(Timer1);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 0a 01 	call	0x214	; 0x214 <Timer_Start>
 184:	08 95       	ret

00000186 <Servo_Motor_Rotate>:
}

void Servo_Motor_Rotate(float32 degree)
{
	float32 Duty_Cycle = ((degree*5)/180)+5;
	PWM_Generate(Timer1,Duty_Cycle);	
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 ea       	ldi	r20, 0xA0	; 160
 18c:	50 e4       	ldi	r21, 0x40	; 64
 18e:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	44 e3       	ldi	r20, 0x34	; 52
 198:	53 e4       	ldi	r21, 0x43	; 67
 19a:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 ea       	ldi	r20, 0xA0	; 160
 1a4:	50 e4       	ldi	r21, 0x40	; 64
 1a6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__addsf3>
 1aa:	ab 01       	movw	r20, r22
 1ac:	bc 01       	movw	r22, r24
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 2e 01 	call	0x25c	; 0x25c <PWM_Generate>
 1b4:	08 95       	ret

000001b6 <Timer_Init>:
	}
	
}

void Timer_SetDelay(uint8 Timer, uint32 Delay_Ms)
{
 1b6:	88 23       	and	r24, r24
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <Timer_Init+0xa>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	99 f0       	breq	.+38     	; 0x1e4 <Timer_Init+0x2e>
 1be:	08 95       	ret
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	83 bf       	out	0x33, r24	; 51
 1c6:	83 b7       	in	r24, 0x33	; 51
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	83 bf       	out	0x33, r24	; 51
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 1d6:	83 b7       	in	r24, 0x33	; 51
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	83 bf       	out	0x33, r24	; 51
 1dc:	83 b7       	in	r24, 0x33	; 51
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	83 bf       	out	0x33, r24	; 51
 1e2:	08 95       	ret
 1e4:	8f b5       	in	r24, 0x2f	; 47
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	8f bd       	out	0x2f, r24	; 47
 1ea:	8f b5       	in	r24, 0x2f	; 47
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8f bd       	out	0x2f, r24	; 47
 1f0:	8e b5       	in	r24, 0x2e	; 46
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	8e bd       	out	0x2e, r24	; 46
 1f6:	8e b5       	in	r24, 0x2e	; 46
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	8e bd       	out	0x2e, r24	; 46
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	65 e0       	ldi	r22, 0x05	; 5
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPINDir>
 206:	8f b5       	in	r24, 0x2f	; 47
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	8f bd       	out	0x2f, r24	; 47
 20c:	8f b5       	in	r24, 0x2f	; 47
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8f bd       	out	0x2f, r24	; 47
 212:	08 95       	ret

00000214 <Timer_Start>:
 214:	88 23       	and	r24, r24
 216:	19 f0       	breq	.+6      	; 0x21e <Timer_Start+0xa>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	41 f0       	breq	.+16     	; 0x22c <Timer_Start+0x18>
 21c:	08 95       	ret
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	81 60       	ori	r24, 0x01	; 1
 222:	83 bf       	out	0x33, r24	; 51
 224:	83 b7       	in	r24, 0x33	; 51
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	83 bf       	out	0x33, r24	; 51
 22a:	08 95       	ret
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	8e bd       	out	0x2e, r24	; 46
 232:	8e b5       	in	r24, 0x2e	; 46
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	8e bd       	out	0x2e, r24	; 46
 238:	8e b5       	in	r24, 0x2e	; 46
 23a:	84 60       	ori	r24, 0x04	; 4
 23c:	8e bd       	out	0x2e, r24	; 46
 23e:	08 95       	ret

00000240 <PWM_Freq_Generate>:
		}
}

void PWM_Freq_Generate(uint16 Freq)
{
	ICR1 = (16000000/(PRESCALER_FACTOR_T1*Freq));
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	38 2f       	mov	r19, r24
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	74 e2       	ldi	r23, 0x24	; 36
 24e:	84 ef       	ldi	r24, 0xF4	; 244
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 1e 04 	call	0x83c	; 0x83c <__divmodsi4>
 256:	37 bd       	out	0x27, r19	; 39
 258:	26 bd       	out	0x26, r18	; 38
 25a:	08 95       	ret

0000025c <PWM_Generate>:
}

void PWM_Generate(uint8 Timer,float32 Duty_Cycle)
{
 25c:	28 2f       	mov	r18, r24
 25e:	cb 01       	movw	r24, r22
 260:	ba 01       	movw	r22, r20
	switch(Timer)
 262:	22 23       	and	r18, r18
 264:	19 f0       	breq	.+6      	; 0x26c <PWM_Generate+0x10>
 266:	21 30       	cpi	r18, 0x01	; 1
 268:	b9 f0       	breq	.+46     	; 0x298 <PWM_Generate+0x3c>
 26a:	08 95       	ret
	{
		case Timer0:
		#if			Timer0_PWM_WaveType			==		Non_Inverted
		OCR0 = ((Duty_Cycle*OVF_Ticks_T0)/100)-1;
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	53 e4       	ldi	r21, 0x43	; 67
 274:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	48 ec       	ldi	r20, 0xC8	; 200
 27e:	52 e4       	ldi	r21, 0x42	; 66
 280:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e8       	ldi	r20, 0x80	; 128
 28a:	5f e3       	ldi	r21, 0x3F	; 63
 28c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__subsf3>
 290:	0e 94 31 03 	call	0x662	; 0x662 <__fixunssfsi>
 294:	6c bf       	out	0x3c, r22	; 60
		
		#elif		Timer0_PWM_WaveType			==		Inverted
		OCR0 = 255-((Duty_Cycle * OVF_Ticks_T0)/100);
		#endif
		break;
 296:	08 95       	ret
		
		case Timer1:
		#if			Timer1_PWM_WaveType			==		Non_Inverted
		OCR1A = ((Duty_Cycle * OVF_Ticks_T1)/100)-1;
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e4       	ldi	r19, 0x40	; 64
 29c:	4c e9       	ldi	r20, 0x9C	; 156
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	48 ec       	ldi	r20, 0xC8	; 200
 2aa:	52 e4       	ldi	r21, 0x42	; 66
 2ac:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__subsf3>
 2bc:	0e 94 31 03 	call	0x662	; 0x662 <__fixunssfsi>
 2c0:	7b bd       	out	0x2b, r23	; 43
 2c2:	6a bd       	out	0x2a, r22	; 42
 2c4:	08 95       	ret

000002c6 <__vector_11>:
		break;
	}
}

ISR(TIMER0_OVF_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 2e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1712>
 2ec:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1712+0x1>
 2f0:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1712+0x2>
 2f4:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1712+0x3>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1712>
 302:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1712+0x1>
 306:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1712+0x2>
 30a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1712+0x3>
	
	if(cnt == NUM_OVF_0)
 30e:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 312:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 316:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 31a:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 31e:	84 17       	cp	r24, r20
 320:	95 07       	cpc	r25, r21
 322:	a6 07       	cpc	r26, r22
 324:	b7 07       	cpc	r27, r23
 326:	71 f4       	brne	.+28     	; 0x344 <__vector_11+0x7e>
	{
		cnt = 0;
 328:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1712>
 32c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1712+0x1>
 330:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1712+0x2>
 334:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1712+0x3>
		(*PTR_0)();
 338:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 33c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 340:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 342:	82 b7       	in	r24, 0x32	; 50
	}
}
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
	(*PTR_0)();
 388:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 38c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 390:	09 95       	icall
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 3d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3de:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3e2:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	a1 1d       	adc	r26, r1
 3ea:	b1 1d       	adc	r27, r1
 3ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3f4:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3f8:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 3fc:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 400:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 404:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 408:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 40c:	84 17       	cp	r24, r20
 40e:	95 07       	cpc	r25, r21
 410:	a6 07       	cpc	r26, r22
 412:	b7 07       	cpc	r27, r23
 414:	79 f4       	brne	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		cnt = 0;
 416:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 41a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 422:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 426:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 42a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 42e:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 430:	8c b5       	in	r24, 0x2c	; 44
 432:	9d b5       	in	r25, 0x2d	; 45
	}
}
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	7f 91       	pop	r23
 442:	6f 91       	pop	r22
 444:	5f 91       	pop	r21
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	(*PTR_1)();
 478:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 47c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 480:	09 95       	icall
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	bf 91       	pop	r27
 488:	af 91       	pop	r26
 48a:	9f 91       	pop	r25
 48c:	8f 91       	pop	r24
 48e:	7f 91       	pop	r23
 490:	6f 91       	pop	r22
 492:	5f 91       	pop	r21
 494:	4f 91       	pop	r20
 496:	3f 91       	pop	r19
 498:	2f 91       	pop	r18
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__subsf3>:
 4a4:	50 58       	subi	r21, 0x80	; 128

000004a6 <__addsf3>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	aa 27       	eor	r26, r26
 4aa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__addsf3x>
 4ae:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 4b2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 4b6:	38 f0       	brcs	.+14     	; 0x4c6 <__addsf3+0x20>
 4b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 4bc:	20 f0       	brcs	.+8      	; 0x4c6 <__addsf3+0x20>
 4be:	39 f4       	brne	.+14     	; 0x4ce <__addsf3+0x28>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	19 f4       	brne	.+6      	; 0x4ca <__addsf3+0x24>
 4c4:	26 f4       	brtc	.+8      	; 0x4ce <__addsf3+0x28>
 4c6:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 4ca:	0e f4       	brtc	.+2      	; 0x4ce <__addsf3+0x28>
 4cc:	e0 95       	com	r30
 4ce:	e7 fb       	bst	r30, 7
 4d0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>

000004d4 <__addsf3x>:
 4d4:	e9 2f       	mov	r30, r25
 4d6:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 4da:	58 f3       	brcs	.-42     	; 0x4b2 <__addsf3+0xc>
 4dc:	ba 17       	cp	r27, r26
 4de:	62 07       	cpc	r22, r18
 4e0:	73 07       	cpc	r23, r19
 4e2:	84 07       	cpc	r24, r20
 4e4:	95 07       	cpc	r25, r21
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__addsf3x+0x1c>
 4e8:	79 f4       	brne	.+30     	; 0x508 <__addsf3x+0x34>
 4ea:	a6 f5       	brtc	.+104    	; 0x554 <__addsf3x+0x80>
 4ec:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 4f0:	0e f4       	brtc	.+2      	; 0x4f4 <__addsf3x+0x20>
 4f2:	e0 95       	com	r30
 4f4:	0b 2e       	mov	r0, r27
 4f6:	ba 2f       	mov	r27, r26
 4f8:	a0 2d       	mov	r26, r0
 4fa:	0b 01       	movw	r0, r22
 4fc:	b9 01       	movw	r22, r18
 4fe:	90 01       	movw	r18, r0
 500:	0c 01       	movw	r0, r24
 502:	ca 01       	movw	r24, r20
 504:	a0 01       	movw	r20, r0
 506:	11 24       	eor	r1, r1
 508:	ff 27       	eor	r31, r31
 50a:	59 1b       	sub	r21, r25
 50c:	99 f0       	breq	.+38     	; 0x534 <__addsf3x+0x60>
 50e:	59 3f       	cpi	r21, 0xF9	; 249
 510:	50 f4       	brcc	.+20     	; 0x526 <__addsf3x+0x52>
 512:	50 3e       	cpi	r21, 0xE0	; 224
 514:	68 f1       	brcs	.+90     	; 0x570 <__addsf3x+0x9c>
 516:	1a 16       	cp	r1, r26
 518:	f0 40       	sbci	r31, 0x00	; 0
 51a:	a2 2f       	mov	r26, r18
 51c:	23 2f       	mov	r18, r19
 51e:	34 2f       	mov	r19, r20
 520:	44 27       	eor	r20, r20
 522:	58 5f       	subi	r21, 0xF8	; 248
 524:	f3 cf       	rjmp	.-26     	; 0x50c <__addsf3x+0x38>
 526:	46 95       	lsr	r20
 528:	37 95       	ror	r19
 52a:	27 95       	ror	r18
 52c:	a7 95       	ror	r26
 52e:	f0 40       	sbci	r31, 0x00	; 0
 530:	53 95       	inc	r21
 532:	c9 f7       	brne	.-14     	; 0x526 <__addsf3x+0x52>
 534:	7e f4       	brtc	.+30     	; 0x554 <__addsf3x+0x80>
 536:	1f 16       	cp	r1, r31
 538:	ba 0b       	sbc	r27, r26
 53a:	62 0b       	sbc	r22, r18
 53c:	73 0b       	sbc	r23, r19
 53e:	84 0b       	sbc	r24, r20
 540:	ba f0       	brmi	.+46     	; 0x570 <__addsf3x+0x9c>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	a1 f0       	breq	.+40     	; 0x56e <__addsf3x+0x9a>
 546:	ff 0f       	add	r31, r31
 548:	bb 1f       	adc	r27, r27
 54a:	66 1f       	adc	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	c2 f7       	brpl	.-16     	; 0x542 <__addsf3x+0x6e>
 552:	0e c0       	rjmp	.+28     	; 0x570 <__addsf3x+0x9c>
 554:	ba 0f       	add	r27, r26
 556:	62 1f       	adc	r22, r18
 558:	73 1f       	adc	r23, r19
 55a:	84 1f       	adc	r24, r20
 55c:	48 f4       	brcc	.+18     	; 0x570 <__addsf3x+0x9c>
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f7 95       	ror	r31
 568:	9e 3f       	cpi	r25, 0xFE	; 254
 56a:	08 f0       	brcs	.+2      	; 0x56e <__addsf3x+0x9a>
 56c:	b0 cf       	rjmp	.-160    	; 0x4ce <__addsf3+0x28>
 56e:	93 95       	inc	r25
 570:	88 0f       	add	r24, r24
 572:	08 f0       	brcs	.+2      	; 0x576 <__addsf3x+0xa2>
 574:	99 27       	eor	r25, r25
 576:	ee 0f       	add	r30, r30
 578:	97 95       	ror	r25
 57a:	87 95       	ror	r24
 57c:	08 95       	ret

0000057e <__divsf3>:
 57e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__divsf3x>
 582:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 586:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 58a:	58 f0       	brcs	.+22     	; 0x5a2 <__divsf3+0x24>
 58c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 590:	40 f0       	brcs	.+16     	; 0x5a2 <__divsf3+0x24>
 592:	29 f4       	brne	.+10     	; 0x59e <__divsf3+0x20>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	29 f0       	breq	.+10     	; 0x5a2 <__divsf3+0x24>
 598:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 59c:	51 11       	cpse	r21, r1
 59e:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>
 5a2:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 5aa:	68 f3       	brcs	.-38     	; 0x586 <__divsf3+0x8>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__divsf3+0x1e>
 5b0:	55 23       	and	r21, r21
 5b2:	91 f3       	breq	.-28     	; 0x598 <__divsf3+0x1a>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	35 d0       	rcall	.+106    	; 0x63e <__divsf3_pse+0x92>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	32 d0       	rcall	.+100    	; 0x640 <__divsf3_pse+0x94>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	2b d0       	rcall	.+86     	; 0x63e <__divsf3_pse+0x92>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	29 d0       	rcall	.+82     	; 0x63e <__divsf3_pse+0x92>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	3a f0       	brmi	.+14     	; 0x61c <__divsf3_pse+0x70>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	78 f0       	brcs	.+30     	; 0x632 <__divsf3_pse+0x86>
 614:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 618:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__divsf3_pse+0x6c>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__divsf3_pse+0x6c>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c9 f7       	brne	.-14     	; 0x624 <__divsf3_pse+0x78>
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret
 63e:	e1 e0       	ldi	r30, 0x01	; 1
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	62 17       	cp	r22, r18
 64a:	73 07       	cpc	r23, r19
 64c:	84 07       	cpc	r24, r20
 64e:	ba 07       	cpc	r27, r26
 650:	20 f0       	brcs	.+8      	; 0x65a <__divsf3_pse+0xae>
 652:	62 1b       	sub	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba 0b       	sbc	r27, r26
 65a:	ee 1f       	adc	r30, r30
 65c:	88 f7       	brcc	.-30     	; 0x640 <__divsf3_pse+0x94>
 65e:	e0 95       	com	r30
 660:	08 95       	ret

00000662 <__fixunssfsi>:
 662:	0e 94 90 03 	call	0x720	; 0x720 <__fp_splitA>
 666:	88 f0       	brcs	.+34     	; 0x68a <__fixunssfsi+0x28>
 668:	9f 57       	subi	r25, 0x7F	; 127
 66a:	98 f0       	brcs	.+38     	; 0x692 <__fixunssfsi+0x30>
 66c:	b9 2f       	mov	r27, r25
 66e:	99 27       	eor	r25, r25
 670:	b7 51       	subi	r27, 0x17	; 23
 672:	b0 f0       	brcs	.+44     	; 0x6a0 <__fixunssfsi+0x3e>
 674:	e1 f0       	breq	.+56     	; 0x6ae <__fixunssfsi+0x4c>
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	1a f0       	brmi	.+6      	; 0x686 <__fixunssfsi+0x24>
 680:	ba 95       	dec	r27
 682:	c9 f7       	brne	.-14     	; 0x676 <__fixunssfsi+0x14>
 684:	14 c0       	rjmp	.+40     	; 0x6ae <__fixunssfsi+0x4c>
 686:	b1 30       	cpi	r27, 0x01	; 1
 688:	91 f0       	breq	.+36     	; 0x6ae <__fixunssfsi+0x4c>
 68a:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_zero>
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	08 95       	ret
 692:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 696:	67 2f       	mov	r22, r23
 698:	78 2f       	mov	r23, r24
 69a:	88 27       	eor	r24, r24
 69c:	b8 5f       	subi	r27, 0xF8	; 248
 69e:	39 f0       	breq	.+14     	; 0x6ae <__fixunssfsi+0x4c>
 6a0:	b9 3f       	cpi	r27, 0xF9	; 249
 6a2:	cc f3       	brlt	.-14     	; 0x696 <__fixunssfsi+0x34>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b3 95       	inc	r27
 6ac:	d9 f7       	brne	.-10     	; 0x6a4 <__fixunssfsi+0x42>
 6ae:	3e f4       	brtc	.+14     	; 0x6be <__fixunssfsi+0x5c>
 6b0:	90 95       	com	r25
 6b2:	80 95       	com	r24
 6b4:	70 95       	com	r23
 6b6:	61 95       	neg	r22
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__fp_inf>:
 6c0:	97 f9       	bld	r25, 7
 6c2:	9f 67       	ori	r25, 0x7F	; 127
 6c4:	80 e8       	ldi	r24, 0x80	; 128
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	08 95       	ret

000006cc <__fp_nan>:
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	80 ec       	ldi	r24, 0xC0	; 192
 6d0:	08 95       	ret

000006d2 <__fp_pscA>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	09 06       	cpc	r0, r25
 6de:	08 95       	ret

000006e0 <__fp_pscB>:
 6e0:	00 24       	eor	r0, r0
 6e2:	0a 94       	dec	r0
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	05 06       	cpc	r0, r21
 6ec:	08 95       	ret

000006ee <__fp_round>:
 6ee:	09 2e       	mov	r0, r25
 6f0:	03 94       	inc	r0
 6f2:	00 0c       	add	r0, r0
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0xc>
 6f6:	88 23       	and	r24, r24
 6f8:	52 f0       	brmi	.+20     	; 0x70e <__fp_round+0x20>
 6fa:	bb 0f       	add	r27, r27
 6fc:	40 f4       	brcc	.+16     	; 0x70e <__fp_round+0x20>
 6fe:	bf 2b       	or	r27, r31
 700:	11 f4       	brne	.+4      	; 0x706 <__fp_round+0x18>
 702:	60 ff       	sbrs	r22, 0
 704:	04 c0       	rjmp	.+8      	; 0x70e <__fp_round+0x20>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <__fp_split3>:
 710:	57 fd       	sbrc	r21, 7
 712:	90 58       	subi	r25, 0x80	; 128
 714:	44 0f       	add	r20, r20
 716:	55 1f       	adc	r21, r21
 718:	59 f0       	breq	.+22     	; 0x730 <__fp_splitA+0x10>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	71 f0       	breq	.+28     	; 0x73a <__fp_splitA+0x1a>
 71e:	47 95       	ror	r20

00000720 <__fp_splitA>:
 720:	88 0f       	add	r24, r24
 722:	97 fb       	bst	r25, 7
 724:	99 1f       	adc	r25, r25
 726:	61 f0       	breq	.+24     	; 0x740 <__fp_splitA+0x20>
 728:	9f 3f       	cpi	r25, 0xFF	; 255
 72a:	79 f0       	breq	.+30     	; 0x74a <__fp_splitA+0x2a>
 72c:	87 95       	ror	r24
 72e:	08 95       	ret
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	14 06       	cpc	r1, r20
 736:	55 1f       	adc	r21, r21
 738:	f2 cf       	rjmp	.-28     	; 0x71e <__fp_split3+0xe>
 73a:	46 95       	lsr	r20
 73c:	f1 df       	rcall	.-30     	; 0x720 <__fp_splitA>
 73e:	08 c0       	rjmp	.+16     	; 0x750 <__fp_splitA+0x30>
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	18 06       	cpc	r1, r24
 746:	99 1f       	adc	r25, r25
 748:	f1 cf       	rjmp	.-30     	; 0x72c <__fp_splitA+0xc>
 74a:	86 95       	lsr	r24
 74c:	71 05       	cpc	r23, r1
 74e:	61 05       	cpc	r22, r1
 750:	08 94       	sec
 752:	08 95       	ret

00000754 <__fp_zero>:
 754:	e8 94       	clt

00000756 <__fp_szero>:
 756:	bb 27       	eor	r27, r27
 758:	66 27       	eor	r22, r22
 75a:	77 27       	eor	r23, r23
 75c:	cb 01       	movw	r24, r22
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__mulsf3>:
 762:	0e 94 c4 03 	call	0x788	; 0x788 <__mulsf3x>
 766:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 76a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 76e:	38 f0       	brcs	.+14     	; 0x77e <__mulsf3+0x1c>
 770:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 774:	20 f0       	brcs	.+8      	; 0x77e <__mulsf3+0x1c>
 776:	95 23       	and	r25, r21
 778:	11 f0       	breq	.+4      	; 0x77e <__mulsf3+0x1c>
 77a:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 77e:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 782:	11 24       	eor	r1, r1
 784:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>

00000788 <__mulsf3x>:
 788:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 78c:	70 f3       	brcs	.-36     	; 0x76a <__mulsf3+0x8>

0000078e <__mulsf3_pse>:
 78e:	95 9f       	mul	r25, r21
 790:	c1 f3       	breq	.-16     	; 0x782 <__mulsf3+0x20>
 792:	95 0f       	add	r25, r21
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	55 1f       	adc	r21, r21
 798:	62 9f       	mul	r22, r18
 79a:	f0 01       	movw	r30, r0
 79c:	72 9f       	mul	r23, r18
 79e:	bb 27       	eor	r27, r27
 7a0:	f0 0d       	add	r31, r0
 7a2:	b1 1d       	adc	r27, r1
 7a4:	63 9f       	mul	r22, r19
 7a6:	aa 27       	eor	r26, r26
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	aa 1f       	adc	r26, r26
 7ae:	64 9f       	mul	r22, r20
 7b0:	66 27       	eor	r22, r22
 7b2:	b0 0d       	add	r27, r0
 7b4:	a1 1d       	adc	r26, r1
 7b6:	66 1f       	adc	r22, r22
 7b8:	82 9f       	mul	r24, r18
 7ba:	22 27       	eor	r18, r18
 7bc:	b0 0d       	add	r27, r0
 7be:	a1 1d       	adc	r26, r1
 7c0:	62 1f       	adc	r22, r18
 7c2:	73 9f       	mul	r23, r19
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	83 9f       	mul	r24, r19
 7cc:	a0 0d       	add	r26, r0
 7ce:	61 1d       	adc	r22, r1
 7d0:	22 1f       	adc	r18, r18
 7d2:	74 9f       	mul	r23, r20
 7d4:	33 27       	eor	r19, r19
 7d6:	a0 0d       	add	r26, r0
 7d8:	61 1d       	adc	r22, r1
 7da:	23 1f       	adc	r18, r19
 7dc:	84 9f       	mul	r24, r20
 7de:	60 0d       	add	r22, r0
 7e0:	21 1d       	adc	r18, r1
 7e2:	82 2f       	mov	r24, r18
 7e4:	76 2f       	mov	r23, r22
 7e6:	6a 2f       	mov	r22, r26
 7e8:	11 24       	eor	r1, r1
 7ea:	9f 57       	subi	r25, 0x7F	; 127
 7ec:	50 40       	sbci	r21, 0x00	; 0
 7ee:	9a f0       	brmi	.+38     	; 0x816 <__mulsf3_pse+0x88>
 7f0:	f1 f0       	breq	.+60     	; 0x82e <__mulsf3_pse+0xa0>
 7f2:	88 23       	and	r24, r24
 7f4:	4a f0       	brmi	.+18     	; 0x808 <__mulsf3_pse+0x7a>
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	bb 1f       	adc	r27, r27
 7fc:	66 1f       	adc	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	91 50       	subi	r25, 0x01	; 1
 804:	50 40       	sbci	r21, 0x00	; 0
 806:	a9 f7       	brne	.-22     	; 0x7f2 <__mulsf3_pse+0x64>
 808:	9e 3f       	cpi	r25, 0xFE	; 254
 80a:	51 05       	cpc	r21, r1
 80c:	80 f0       	brcs	.+32     	; 0x82e <__mulsf3_pse+0xa0>
 80e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 812:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	e4 f3       	brlt	.-8      	; 0x812 <__mulsf3_pse+0x84>
 81a:	98 3e       	cpi	r25, 0xE8	; 232
 81c:	d4 f3       	brlt	.-12     	; 0x812 <__mulsf3_pse+0x84>
 81e:	86 95       	lsr	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f7 95       	ror	r31
 828:	e7 95       	ror	r30
 82a:	9f 5f       	subi	r25, 0xFF	; 255
 82c:	c1 f7       	brne	.-16     	; 0x81e <__mulsf3_pse+0x90>
 82e:	fe 2b       	or	r31, r30
 830:	88 0f       	add	r24, r24
 832:	91 1d       	adc	r25, r1
 834:	96 95       	lsr	r25
 836:	87 95       	ror	r24
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__divmodsi4>:
 83c:	05 2e       	mov	r0, r21
 83e:	97 fb       	bst	r25, 7
 840:	1e f4       	brtc	.+6      	; 0x848 <__divmodsi4+0xc>
 842:	00 94       	com	r0
 844:	0e 94 35 04 	call	0x86a	; 0x86a <__negsi2>
 848:	57 fd       	sbrc	r21, 7
 84a:	07 d0       	rcall	.+14     	; 0x85a <__divmodsi4_neg2>
 84c:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodsi4>
 850:	07 fc       	sbrc	r0, 7
 852:	03 d0       	rcall	.+6      	; 0x85a <__divmodsi4_neg2>
 854:	4e f4       	brtc	.+18     	; 0x868 <__divmodsi4_exit>
 856:	0c 94 35 04 	jmp	0x86a	; 0x86a <__negsi2>

0000085a <__divmodsi4_neg2>:
 85a:	50 95       	com	r21
 85c:	40 95       	com	r20
 85e:	30 95       	com	r19
 860:	21 95       	neg	r18
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	4f 4f       	sbci	r20, 0xFF	; 255
 866:	5f 4f       	sbci	r21, 0xFF	; 255

00000868 <__divmodsi4_exit>:
 868:	08 95       	ret

0000086a <__negsi2>:
 86a:	90 95       	com	r25
 86c:	80 95       	com	r24
 86e:	70 95       	com	r23
 870:	61 95       	neg	r22
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	08 95       	ret

0000087a <__udivmodsi4>:
 87a:	a1 e2       	ldi	r26, 0x21	; 33
 87c:	1a 2e       	mov	r1, r26
 87e:	aa 1b       	sub	r26, r26
 880:	bb 1b       	sub	r27, r27
 882:	fd 01       	movw	r30, r26
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <__udivmodsi4_ep>

00000886 <__udivmodsi4_loop>:
 886:	aa 1f       	adc	r26, r26
 888:	bb 1f       	adc	r27, r27
 88a:	ee 1f       	adc	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	a2 17       	cp	r26, r18
 890:	b3 07       	cpc	r27, r19
 892:	e4 07       	cpc	r30, r20
 894:	f5 07       	cpc	r31, r21
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__udivmodsi4_ep>
 898:	a2 1b       	sub	r26, r18
 89a:	b3 0b       	sbc	r27, r19
 89c:	e4 0b       	sbc	r30, r20
 89e:	f5 0b       	sbc	r31, r21

000008a0 <__udivmodsi4_ep>:
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	1a 94       	dec	r1
 8aa:	69 f7       	brne	.-38     	; 0x886 <__udivmodsi4_loop>
 8ac:	60 95       	com	r22
 8ae:	70 95       	com	r23
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	bd 01       	movw	r22, r26
 8ba:	cf 01       	movw	r24, r30
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
