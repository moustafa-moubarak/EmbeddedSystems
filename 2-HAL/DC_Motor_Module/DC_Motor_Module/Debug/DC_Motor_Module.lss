
DC_Motor_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef9  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081c  00000000  00000000  00002089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ca  00000000  00000000  00003115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000039df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_9>
  28:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_10>
  2c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  74:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DC_Motor_Init>:
 */ 
#include "DC_Motor.h"

void DC_Motor_Init(void)
{
		Timer_Init(Timer0);		
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	0e 94 cb 01 	call	0x396	; 0x396 <Timer_Init>
		DIO_SetPINDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 98 00 	call	0x130	; 0x130 <DIO_SetPINDir>
		DIO_SetPINDir(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	64 e0       	ldi	r22, 0x04	; 4
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 98 00 	call	0x130	; 0x130 <DIO_SetPINDir>
  96:	08 95       	ret

00000098 <DC_Motor_Start>:
	
}

void DC_Motor_Start(void)
{
		Timer_Start(Timer0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Timer_Start>
  9e:	08 95       	ret

000000a0 <DC_Motor_Stop>:
}

void DC_Motor_Stop(void)
{
		DIO_SetPinValue(DIO_PORTC, DIO_PIN3,DIO_PIN_LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC, DIO_PIN4,DIO_PIN_LOW);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
  b4:	08 95       	ret

000000b6 <DC_Motor_Set_Speed>:
}

void DC_Motor_Set_Speed(uint8 speed)
{
		PWM_Generate(Timer0,speed);
  b6:	68 2f       	mov	r22, r24
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 37 02 	call	0x46e	; 0x46e <PWM_Generate>
  c0:	08 95       	ret

000000c2 <DC_Motor_Set_Dir>:
}

void DC_Motor_Set_Dir(DC_Motor_Dir dir)
{
	switch(dir)
  c2:	88 23       	and	r24, r24
  c4:	19 f0       	breq	.+6      	; 0xcc <DC_Motor_Set_Dir+0xa>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	61 f0       	breq	.+24     	; 0xe2 <DC_Motor_Set_Dir+0x20>
  ca:	08 95       	ret
	{
		case CLOCK_WISE_DIR :
		DIO_SetPinValue(DIO_PORTC, DIO_PIN3, DIO_PIN_HIGH);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC, DIO_PIN4, DIO_PIN_LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	64 e0       	ldi	r22, 0x04	; 4
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
		break;
  e0:	08 95       	ret
		case ANTI_CLOCK_WISE_DIR :
		DIO_SetPinValue(DIO_PORTC, DIO_PIN3, DIO_PIN_HIGH);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC, DIO_PIN4, DIO_PIN_HIGH);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 09 01 	call	0x212	; 0x212 <DIO_SetPinValue>
  f6:	08 95       	ret

000000f8 <DC_Motor_Toggle>:
		default:
		break;
	}
}
void DC_Motor_Toggle (void)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	00 d0       	rcall	.+0      	; 0xfe <DC_Motor_Toggle+0x6>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	int x =0;
 102:	1a 82       	std	Y+2, r1	; 0x02
 104:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPinValue(DIO_PORTC, DIO_PIN3, &x);
 106:	ae 01       	movw	r20, r28
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_ReadPinValue>
	if( x == DIO_PIN_HIGH)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	19 f4       	brne	.+6      	; 0x122 <DC_Motor_Toggle+0x2a>
	{
		DC_Motor_Stop();
 11c:	0e 94 50 00 	call	0xa0	; 0xa0 <DC_Motor_Stop>
 120:	02 c0       	rjmp	.+4      	; 0x126 <DC_Motor_Toggle+0x2e>
	}
	else
	{
		DC_Motor_Start();
 122:	0e 94 4c 00 	call	0x98	; 0x98 <DC_Motor_Start>
	}
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <DIO_SetPINDir>:
		case (DIO_PORTC):
		PORTC=value;
		break;
		
		case (DIO_PORTD):
		PORTD=value;
 130:	44 23       	and	r20, r20
 132:	b9 f1       	breq	.+110    	; 0x1a2 <DIO_SetPINDir+0x72>
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <DIO_SetPINDir+0xa>
 138:	6b c0       	rjmp	.+214    	; 0x210 <DIO_SetPINDir+0xe0>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	89 f0       	breq	.+34     	; 0x160 <DIO_SetPINDir+0x30>
 13e:	28 f0       	brcs	.+10     	; 0x14a <DIO_SetPINDir+0x1a>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	c9 f0       	breq	.+50     	; 0x176 <DIO_SetPINDir+0x46>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	11 f1       	breq	.+68     	; 0x18c <DIO_SetPINDir+0x5c>
 148:	08 95       	ret
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPINDir+0x26>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPINDir+0x22>
 15a:	82 2b       	or	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	08 95       	ret
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPINDir+0x3c>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPINDir+0x38>
 170:	82 2b       	or	r24, r18
 172:	87 bb       	out	0x17, r24	; 23
 174:	08 95       	ret
 176:	24 b3       	in	r18, 0x14	; 20
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPINDir+0x52>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPINDir+0x4e>
 186:	82 2b       	or	r24, r18
 188:	84 bb       	out	0x14, r24	; 20
 18a:	08 95       	ret
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPINDir+0x68>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPINDir+0x64>
 19c:	82 2b       	or	r24, r18
 19e:	81 bb       	out	0x11, r24	; 17
 1a0:	08 95       	ret
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <DIO_SetPINDir+0x9a>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_SetPINDir+0x82>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	d9 f0       	breq	.+54     	; 0x1e2 <DIO_SetPINDir+0xb2>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	29 f1       	breq	.+74     	; 0x1fa <DIO_SetPINDir+0xca>
 1b0:	08 95       	ret
 1b2:	2a b3       	in	r18, 0x1a	; 26
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPINDir+0x8e>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPINDir+0x8a>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	8a bb       	out	0x1a, r24	; 26
 1c8:	08 95       	ret
 1ca:	27 b3       	in	r18, 0x17	; 23
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPINDir+0xa6>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPINDir+0xa2>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	08 95       	ret
 1e2:	24 b3       	in	r18, 0x14	; 20
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPINDir+0xbe>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPINDir+0xba>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	84 bb       	out	0x14, r24	; 20
 1f8:	08 95       	ret
 1fa:	21 b3       	in	r18, 0x11	; 17
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPINDir+0xd6>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPINDir+0xd2>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	81 bb       	out	0x11, r24	; 17
 210:	08 95       	ret

00000212 <DIO_SetPinValue>:
	}
}

void DIO_SetPinValue(uint8 port, uint8 pin, uint8 value)
{
	switch(value)
 212:	44 23       	and	r20, r20
 214:	b9 f1       	breq	.+110    	; 0x284 <DIO_SetPinValue+0x72>
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <DIO_SetPinValue+0xa>
 21a:	6b c0       	rjmp	.+214    	; 0x2f2 <DIO_SetPinValue+0xe0>
	{
		case (DIO_PIN_HIGH):
		switch(port)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	89 f0       	breq	.+34     	; 0x242 <DIO_SetPinValue+0x30>
 220:	28 f0       	brcs	.+10     	; 0x22c <DIO_SetPinValue+0x1a>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	c9 f0       	breq	.+50     	; 0x258 <DIO_SetPinValue+0x46>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	11 f1       	breq	.+68     	; 0x26e <DIO_SetPinValue+0x5c>
 22a:	08 95       	ret
		{
			case DIO_PORTA:
				SET_BIT(PORTA,pin);
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinValue+0x26>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinValue+0x22>
 23c:	82 2b       	or	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
				break;
 240:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB,pin);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinValue+0x3c>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinValue+0x38>
 252:	82 2b       	or	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
			break;
 256:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC,pin);
 258:	25 b3       	in	r18, 0x15	; 21
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_SetPinValue+0x52>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_SetPinValue+0x4e>
 268:	82 2b       	or	r24, r18
 26a:	85 bb       	out	0x15, r24	; 21
			break;
 26c:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD,pin);
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinValue+0x68>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinValue+0x64>
 27e:	82 2b       	or	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
			break;
 282:	08 95       	ret
			break;
		}
		break;
		
		case (DIO_PIN_LOW):
		switch(port)
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 f0       	breq	.+36     	; 0x2ac <DIO_SetPinValue+0x9a>
 288:	28 f0       	brcs	.+10     	; 0x294 <DIO_SetPinValue+0x82>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	d9 f0       	breq	.+54     	; 0x2c4 <DIO_SetPinValue+0xb2>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	29 f1       	breq	.+74     	; 0x2dc <DIO_SetPinValue+0xca>
 292:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA,pin);
 294:	2b b3       	in	r18, 0x1b	; 27
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_SetPinValue+0x8e>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_SetPinValue+0x8a>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	8b bb       	out	0x1b, r24	; 27
			break;
 2aa:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(PORTB,pin);
 2ac:	28 b3       	in	r18, 0x18	; 24
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinValue+0xa6>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinValue+0xa2>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	88 bb       	out	0x18, r24	; 24
			break;
 2c2:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(PORTC,pin);
 2c4:	25 b3       	in	r18, 0x15	; 21
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_SetPinValue+0xbe>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_SetPinValue+0xba>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	85 bb       	out	0x15, r24	; 21
			break;
 2da:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(PORTD,pin);
 2dc:	22 b3       	in	r18, 0x12	; 18
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_SetPinValue+0xd6>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_SetPinValue+0xd2>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	82 bb       	out	0x12, r24	; 18
 2f2:	08 95       	ret

000002f4 <DIO_ReadPinValue>:
	}
}

void DIO_ReadPinValue(uint8 port, uint8 pin, uint8 *recall_value)
{
	switch (port)
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	89 f0       	breq	.+34     	; 0x31a <DIO_ReadPinValue+0x26>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <DIO_ReadPinValue+0x10>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	c9 f0       	breq	.+50     	; 0x330 <DIO_ReadPinValue+0x3c>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	11 f1       	breq	.+68     	; 0x346 <DIO_ReadPinValue+0x52>
 302:	08 95       	ret
	{
		case DIO_PORTA:
			*recall_value = GET_BIT(PINA,pin);
 304:	89 b3       	in	r24, 0x19	; 25
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_ReadPinValue+0x1a>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_ReadPinValue+0x16>
 312:	81 70       	andi	r24, 0x01	; 1
 314:	fa 01       	movw	r30, r20
 316:	80 83       	st	Z, r24
			break;
 318:	08 95       	ret
			
		case DIO_PORTB:
		*recall_value = GET_BIT(PINB,pin);
 31a:	86 b3       	in	r24, 0x16	; 22
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_ReadPinValue+0x30>
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_ReadPinValue+0x2c>
 328:	81 70       	andi	r24, 0x01	; 1
 32a:	fa 01       	movw	r30, r20
 32c:	80 83       	st	Z, r24
		break;
 32e:	08 95       	ret
		
		case DIO_PORTC:
		*recall_value = GET_BIT(PINC,pin);
 330:	83 b3       	in	r24, 0x13	; 19
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPinValue+0x46>
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPinValue+0x42>
 33e:	81 70       	andi	r24, 0x01	; 1
 340:	fa 01       	movw	r30, r20
 342:	80 83       	st	Z, r24
		break;
 344:	08 95       	ret
		
		case DIO_PORTD:
		*recall_value = GET_BIT(PIND,pin);
 346:	80 b3       	in	r24, 0x10	; 16
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_ReadPinValue+0x5c>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_ReadPinValue+0x58>
 354:	81 70       	andi	r24, 0x01	; 1
 356:	fa 01       	movw	r30, r20
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret

0000035c <main>:

#include "DC_Motor.h"

int main(void)
{
    DC_Motor_Init();
 35c:	0e 94 3e 00 	call	0x7c	; 0x7c <DC_Motor_Init>
	DC_Motor_Set_Dir(ANTI_CLOCK_WISE_DIR);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 61 00 	call	0xc2	; 0xc2 <DC_Motor_Set_Dir>
	DC_Motor_Set_Speed(100);
 366:	84 e6       	ldi	r24, 0x64	; 100
 368:	0e 94 5b 00 	call	0xb6	; 0xb6 <DC_Motor_Set_Speed>
	DC_Motor_Start();
 36c:	0e 94 4c 00 	call	0x98	; 0x98 <DC_Motor_Start>
	
	Timer_Init(Timer1);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 cb 01 	call	0x396	; 0x396 <Timer_Init>
	/*DC_Motor_Toggle();*/
    while (1) 
    {
		Timer_SetDelay(Timer1,1000);
 376:	48 ee       	ldi	r20, 0xE8	; 232
 378:	53 e0       	ldi	r21, 0x03	; 3
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 19 02 	call	0x432	; 0x432 <Timer_SetDelay>
		Set_CallBack(Timer1,DC_Motor_Toggle);
 384:	6c e7       	ldi	r22, 0x7C	; 124
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 0b 02 	call	0x416	; 0x416 <Set_CallBack>
		Timer_Start(Timer1);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Timer_Start>
 394:	f0 cf       	rjmp	.-32     	; 0x376 <main+0x1a>

00000396 <Timer_Init>:
			CLR_BIT(TCCR0, 2);
			break;
		case Timer1:
			CLR_BIT(TCCR1B, 0);
			CLR_BIT(TCCR1B, 1);
			CLR_BIT(TCCR1B, 2);
 396:	88 23       	and	r24, r24
 398:	19 f0       	breq	.+6      	; 0x3a0 <Timer_Init+0xa>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	99 f0       	breq	.+38     	; 0x3c4 <Timer_Init+0x2e>
 39e:	08 95       	ret
 3a0:	83 b7       	in	r24, 0x33	; 51
 3a2:	88 60       	ori	r24, 0x08	; 8
 3a4:	83 bf       	out	0x33, r24	; 51
 3a6:	83 b7       	in	r24, 0x33	; 51
 3a8:	80 64       	ori	r24, 0x40	; 64
 3aa:	83 bf       	out	0x33, r24	; 51
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 98 00 	call	0x130	; 0x130 <DIO_SetPINDir>
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	8f 7e       	andi	r24, 0xEF	; 239
 3ba:	83 bf       	out	0x33, r24	; 51
 3bc:	83 b7       	in	r24, 0x33	; 51
 3be:	80 62       	ori	r24, 0x20	; 32
 3c0:	83 bf       	out	0x33, r24	; 51
 3c2:	08 95       	ret
 3c4:	8f b5       	in	r24, 0x2f	; 47
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	8f bd       	out	0x2f, r24	; 47
 3ca:	8f b5       	in	r24, 0x2f	; 47
 3cc:	8d 7f       	andi	r24, 0xFD	; 253
 3ce:	8f bd       	out	0x2f, r24	; 47
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	8e bd       	out	0x2e, r24	; 46
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	8f 7e       	andi	r24, 0xEF	; 239
 3da:	8e bd       	out	0x2e, r24	; 46
 3dc:	8f b7       	in	r24, 0x3f	; 63
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	8f bf       	out	0x3f, r24	; 63
 3e2:	89 b7       	in	r24, 0x39	; 57
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	89 bf       	out	0x39, r24	; 57
 3e8:	08 95       	ret

000003ea <Timer_Start>:
 3ea:	88 23       	and	r24, r24
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <Timer_Start+0xa>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	41 f0       	breq	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f2:	08 95       	ret
 3f4:	83 b7       	in	r24, 0x33	; 51
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	83 bf       	out	0x33, r24	; 51
 3fa:	83 b7       	in	r24, 0x33	; 51
 3fc:	8d 7f       	andi	r24, 0xFD	; 253
 3fe:	83 bf       	out	0x33, r24	; 51
 400:	08 95       	ret
 402:	8e b5       	in	r24, 0x2e	; 46
 404:	81 60       	ori	r24, 0x01	; 1
 406:	8e bd       	out	0x2e, r24	; 46
 408:	8e b5       	in	r24, 0x2e	; 46
 40a:	8d 7f       	andi	r24, 0xFD	; 253
 40c:	8e bd       	out	0x2e, r24	; 46
 40e:	8e b5       	in	r24, 0x2e	; 46
 410:	84 60       	ori	r24, 0x04	; 4
 412:	8e bd       	out	0x2e, r24	; 46
 414:	08 95       	ret

00000416 <Set_CallBack>:
	}
}

Set_CallBack(uint8 Timer,void(* p)(void))
{
	switch(Timer)
 416:	88 23       	and	r24, r24
 418:	19 f0       	breq	.+6      	; 0x420 <Set_CallBack+0xa>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	29 f0       	breq	.+10     	; 0x428 <Set_CallBack+0x12>
 41e:	08 95       	ret
	{
		case Timer0:
			PTR_0 = p;
 420:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <PTR_0+0x1>
 424:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <PTR_0>
		case Timer1:
			PTR_1 = p;
 428:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <PTR_1+0x1>
 42c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <PTR_1>
	}
	
}
 430:	08 95       	ret

00000432 <Timer_SetDelay>:

void Timer_SetDelay(uint8 Timer, uint32 Delay_Ms)
{
	switch(Timer)
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	d9 f4       	brne	.+54     	; 0x46c <Timer_SetDelay+0x3a>
				if(INIT_VALUE_1 != 0)
				{
					NUM_OVF_1++;
				}
			#elif	TIMER1_WAVEFORM_GEN_Mode	==		CTC
				if (Delay_Ms < 4000)
 436:	40 3a       	cpi	r20, 0xA0	; 160
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	58 07       	cpc	r21, r24
 43c:	61 05       	cpc	r22, r1
 43e:	71 05       	cpc	r23, r1
 440:	a8 f4       	brcc	.+42     	; 0x46c <Timer_SetDelay+0x3a>
				{
					uint8 Tick_Time = PRESCALER_FACTOR_T1 / 16;
					uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time;
					OCR1A = Total_Ticks - 1;
 442:	a8 ee       	ldi	r26, 0xE8	; 232
 444:	b3 e0       	ldi	r27, 0x03	; 3
 446:	9a 01       	movw	r18, r20
 448:	ab 01       	movw	r20, r22
 44a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__muluhisi3>
 44e:	dc 01       	movw	r26, r24
 450:	cb 01       	movw	r24, r22
 452:	68 94       	set
 454:	15 f8       	bld	r1, 5
 456:	b6 95       	lsr	r27
 458:	a7 95       	ror	r26
 45a:	97 95       	ror	r25
 45c:	87 95       	ror	r24
 45e:	16 94       	lsr	r1
 460:	d1 f7       	brne	.-12     	; 0x456 <Timer_SetDelay+0x24>
 462:	bc 01       	movw	r22, r24
 464:	61 50       	subi	r22, 0x01	; 1
 466:	71 09       	sbc	r23, r1
 468:	7b bd       	out	0x2b, r23	; 43
 46a:	6a bd       	out	0x2a, r22	; 42
 46c:	08 95       	ret

0000046e <PWM_Generate>:
		}
}

void PWM_Generate(uint8 Timer,uint16 Duty_Cycle)
{
	switch(Timer)
 46e:	88 23       	and	r24, r24
 470:	19 f0       	breq	.+6      	; 0x478 <PWM_Generate+0xa>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	89 f0       	breq	.+34     	; 0x498 <PWM_Generate+0x2a>
 476:	08 95       	ret
	{
		case Timer0:
		#if			Timer0_PWM_WaveType			==		Non_Inverted
		OCR0 = ((Duty_Cycle*OVF_Ticks_T0)/100)-1;
 478:	76 2f       	mov	r23, r22
 47a:	66 27       	eor	r22, r22
 47c:	9b 01       	movw	r18, r22
 47e:	36 95       	lsr	r19
 480:	27 95       	ror	r18
 482:	36 95       	lsr	r19
 484:	27 95       	ror	r18
 486:	ab e7       	ldi	r26, 0x7B	; 123
 488:	b4 e1       	ldi	r27, 0x14	; 20
 48a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__umulhisi3>
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	81 50       	subi	r24, 0x01	; 1
 494:	8c bf       	out	0x3c, r24	; 60
		
		#elif		Timer0_PWM_WaveType			==		Inverted
		OCR0 = 255-((Duty_Cycle * OVF_Ticks_T0)/100);
		#endif
		break;
 496:	08 95       	ret
		
		case Timer1:
		#if			Timer1_PWM_WaveType			==		Non_Inverted
		OCR1A = ((Duty_Cycle * OVF_Ticks_T1)/100)-1;
 498:	cb 01       	movw	r24, r22
 49a:	a0 e0       	ldi	r26, 0x00	; 0
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	77 27       	eor	r23, r23
 4a0:	66 27       	eor	r22, r22
 4a2:	24 e6       	ldi	r18, 0x64	; 100
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	0e 94 4b 03 	call	0x696	; 0x696 <__divmodsi4>
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	31 09       	sbc	r19, r1
 4b2:	3b bd       	out	0x2b, r19	; 43
 4b4:	2a bd       	out	0x2a, r18	; 42
 4b6:	08 95       	ret

000004b8 <__vector_11>:
		break;
	}
}

ISR(TIMER0_OVF_vect)
{
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 4da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1709>
 4de:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1709+0x1>
 4e2:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1709+0x2>
 4e6:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1709+0x3>
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	a1 1d       	adc	r26, r1
 4ee:	b1 1d       	adc	r27, r1
 4f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1709>
 4f4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1709+0x1>
 4f8:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1709+0x2>
 4fc:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1709+0x3>
	
	if(cnt == NUM_OVF_0)
 500:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <NUM_OVF_0>
 504:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <NUM_OVF_0+0x1>
 508:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <NUM_OVF_0+0x2>
 50c:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <NUM_OVF_0+0x3>
 510:	84 17       	cp	r24, r20
 512:	95 07       	cpc	r25, r21
 514:	a6 07       	cpc	r26, r22
 516:	b7 07       	cpc	r27, r23
 518:	71 f4       	brne	.+28     	; 0x536 <__vector_11+0x7e>
	{
		cnt = 0;
 51a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1709>
 51e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1709+0x1>
 522:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1709+0x2>
 526:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1709+0x3>
		(*PTR_0)();
 52a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 52e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 532:	09 95       	icall
		TCNT0 - INIT_VALUE_0;
 534:	82 b7       	in	r24, 0x32	; 50
	}
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	(*PTR_0)();
 57a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PTR_0>
 57e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PTR_0+0x1>
 582:	09 95       	icall
}
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 5c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5d0:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5d4:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	a1 1d       	adc	r26, r1
 5dc:	b1 1d       	adc	r27, r1
 5de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 5e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5e6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5ea:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(cnt == NUM_OVF_1)
 5ee:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF_1>
 5f2:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF_1+0x1>
 5f6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF_1+0x2>
 5fa:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF_1+0x3>
 5fe:	84 17       	cp	r24, r20
 600:	95 07       	cpc	r25, r21
 602:	a6 07       	cpc	r26, r22
 604:	b7 07       	cpc	r27, r23
 606:	79 f4       	brne	.+30     	; 0x626 <__vector_9+0x80>
	{
		cnt = 0;
 608:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 60c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 610:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 614:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*PTR_1)();
 618:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 61c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 620:	09 95       	icall
		TCNT1 - INIT_VALUE_1;
 622:	8c b5       	in	r24, 0x2c	; 44
 624:	9d b5       	in	r25, 0x2d	; 45
	}
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	2f 93       	push	r18
 654:	3f 93       	push	r19
 656:	4f 93       	push	r20
 658:	5f 93       	push	r21
 65a:	6f 93       	push	r22
 65c:	7f 93       	push	r23
 65e:	8f 93       	push	r24
 660:	9f 93       	push	r25
 662:	af 93       	push	r26
 664:	bf 93       	push	r27
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
	(*PTR_1)();
 66a:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PTR_1>
 66e:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PTR_1+0x1>
 672:	09 95       	icall
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__divmodsi4>:
 696:	05 2e       	mov	r0, r21
 698:	97 fb       	bst	r25, 7
 69a:	1e f4       	brtc	.+6      	; 0x6a2 <__divmodsi4+0xc>
 69c:	00 94       	com	r0
 69e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__negsi2>
 6a2:	57 fd       	sbrc	r21, 7
 6a4:	07 d0       	rcall	.+14     	; 0x6b4 <__divmodsi4_neg2>
 6a6:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodsi4>
 6aa:	07 fc       	sbrc	r0, 7
 6ac:	03 d0       	rcall	.+6      	; 0x6b4 <__divmodsi4_neg2>
 6ae:	4e f4       	brtc	.+18     	; 0x6c2 <__divmodsi4_exit>
 6b0:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__negsi2>

000006b4 <__divmodsi4_neg2>:
 6b4:	50 95       	com	r21
 6b6:	40 95       	com	r20
 6b8:	30 95       	com	r19
 6ba:	21 95       	neg	r18
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	4f 4f       	sbci	r20, 0xFF	; 255
 6c0:	5f 4f       	sbci	r21, 0xFF	; 255

000006c2 <__divmodsi4_exit>:
 6c2:	08 95       	ret

000006c4 <__negsi2>:
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__umulhisi3>:
 6d4:	a2 9f       	mul	r26, r18
 6d6:	b0 01       	movw	r22, r0
 6d8:	b3 9f       	mul	r27, r19
 6da:	c0 01       	movw	r24, r0
 6dc:	a3 9f       	mul	r26, r19
 6de:	70 0d       	add	r23, r0
 6e0:	81 1d       	adc	r24, r1
 6e2:	11 24       	eor	r1, r1
 6e4:	91 1d       	adc	r25, r1
 6e6:	b2 9f       	mul	r27, r18
 6e8:	70 0d       	add	r23, r0
 6ea:	81 1d       	adc	r24, r1
 6ec:	11 24       	eor	r1, r1
 6ee:	91 1d       	adc	r25, r1
 6f0:	08 95       	ret

000006f2 <__muluhisi3>:
 6f2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__umulhisi3>
 6f6:	a5 9f       	mul	r26, r21
 6f8:	90 0d       	add	r25, r0
 6fa:	b4 9f       	mul	r27, r20
 6fc:	90 0d       	add	r25, r0
 6fe:	a4 9f       	mul	r26, r20
 700:	80 0d       	add	r24, r0
 702:	91 1d       	adc	r25, r1
 704:	11 24       	eor	r1, r1
 706:	08 95       	ret

00000708 <__udivmodsi4>:
 708:	a1 e2       	ldi	r26, 0x21	; 33
 70a:	1a 2e       	mov	r1, r26
 70c:	aa 1b       	sub	r26, r26
 70e:	bb 1b       	sub	r27, r27
 710:	fd 01       	movw	r30, r26
 712:	0d c0       	rjmp	.+26     	; 0x72e <__udivmodsi4_ep>

00000714 <__udivmodsi4_loop>:
 714:	aa 1f       	adc	r26, r26
 716:	bb 1f       	adc	r27, r27
 718:	ee 1f       	adc	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	a2 17       	cp	r26, r18
 71e:	b3 07       	cpc	r27, r19
 720:	e4 07       	cpc	r30, r20
 722:	f5 07       	cpc	r31, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__udivmodsi4_ep>
 726:	a2 1b       	sub	r26, r18
 728:	b3 0b       	sbc	r27, r19
 72a:	e4 0b       	sbc	r30, r20
 72c:	f5 0b       	sbc	r31, r21

0000072e <__udivmodsi4_ep>:
 72e:	66 1f       	adc	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	1a 94       	dec	r1
 738:	69 f7       	brne	.-38     	; 0x714 <__udivmodsi4_loop>
 73a:	60 95       	com	r22
 73c:	70 95       	com	r23
 73e:	80 95       	com	r24
 740:	90 95       	com	r25
 742:	9b 01       	movw	r18, r22
 744:	ac 01       	movw	r20, r24
 746:	bd 01       	movw	r22, r26
 748:	cf 01       	movw	r24, r30
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
